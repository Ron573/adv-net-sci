{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Embedding Methods: Implementation and Practice\n",
        "\n",
        "## Spectral Embedding\n",
        "\n",
        "### Network Compression Approach\n",
        "\n",
        "Networks are a high-dimensional discrete data that can be difficult to analyze with traditional machine learning methods that assume continuous and smooth data. Spectral embedding is a technique to embed networks into low-dimensional spaces.\n",
        "\n",
        "Let us approach the spectral embedding from the perspective of network compression.\n",
        "Suppose we have an adjacency matrix $\\mathbf{A}$ of a network.\n",
        "The adjacency matrix is a high-dimensional data, i.e., a matrix has size $N \\times N$ for a network of $N$ nodes.\n",
        "We want to compress it into a lower-dimensional matrix $\\mathbf{U}$ of size $N \\times d$ for a user-defined small integer $d < N$.\n",
        "A good $\\mathbf{U}$ should preserve the network structure and thus can reconstruct the original data $\\mathbf{A}$ as closely as possible.\n",
        "This leads to the following optimization problem:\n",
        "\n",
        "$$\n",
        "\\min_{\\mathbf{U}} J(\\mathbf{U}),\\quad J(\\mathbf{U}) = \\| \\mathbf{A} - \\mathbf{U}\\mathbf{U}^\\top \\|_F^2\n",
        "$$\n",
        "\n",
        "where:\n",
        "\n",
        "1. $\\mathbf{U}\\mathbf{U}^\\top$ is the outer product of $\\mathbf{U}$ and represents the reconstructed network.\n",
        "2. $\\|\\cdot\\|_F$ is the Frobenius norm, which is the sum of the squares of the elements in the matrix.\n",
        "3. $J(\\mathbf{U})$ is the loss function that measures the difference between the original network $\\mathbf{A}$ and the reconstructed network $\\mathbf{U}\\mathbf{U}^\\top$.\n",
        "\n",
        "By minimizing the Frobenius norm with respect to $\\mathbf{U}$, we obtain the best low-dimensional embedding of the network.\n",
        "\n",
        "### An Intuitive Solution\n",
        "\n",
        "Let us first understand the solution intuitively.\n",
        "Consider the spectral decomposition of $\\mathbf{A}$:\n",
        "\n",
        "$$\n",
        "\\mathbf{A} = \\sum_{i=1}^N \\lambda_i \\mathbf{u}_i \\mathbf{u}_i^\\top\n",
        "$$\n",
        "\n",
        "where $\\lambda_i$ are weights and $\\mathbf{u}_i$ are column vectors. Each term $\\lambda_i \\mathbf{u}_i \\mathbf{u}_i^\\top$ is a rank-one matrix that captures a part of the network's structure. The larger the weight $\\lambda_i$, the more important that term is in describing the network.\n",
        "\n",
        "To compress the network, we can select the $d$ terms with the largest weights $\\lambda_i$. By combining the corresponding $\\mathbf{u}_i$ vectors into a matrix $\\mathbf{U}$, we obtain a good low-dimensional embedding of the network.\n",
        "\n",
        "![](../figs/spectral-decomposition.jpg)\n",
        "\n",
        "For a formal proof, please refer to the [Appendix section](./04-appendix.md).\n",
        "\n",
        "### Example: Spectral Embedding\n",
        "\n",
        "Let us demonstrate the results with a simple example as follows."
      ],
      "id": "abb07207"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        ":tags: [hide-input]\n",
        "\n",
        "import numpy as np\n",
        "import networkx as nx\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Create a small example network\n",
        "G = nx.karate_club_graph()\n",
        "A = nx.adjacency_matrix(G).toarray()\n",
        "labels = np.unique([d[1]['club'] for d in G.nodes(data=True)], return_inverse=True)[1]\n",
        "cmap = sns.color_palette()\n",
        "nx.draw(G, with_labels=False, node_color=[cmap[i] for i in labels])"
      ],
      "id": "14a10a84",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        ":tags: [hide-input]\n",
        "\n",
        "# Compute the spectral decomposition\n",
        "eigvals, eigvecs = np.linalg.eig(A)\n",
        "\n",
        "# Find the top d eigenvectors\n",
        "d = 2\n",
        "sorted_indices = np.argsort(eigvals)[::-1][:d]\n",
        "eigvals = eigvals[sorted_indices]\n",
        "eigvecs = eigvecs[:, sorted_indices]\n",
        "\n",
        "# Plot the results\n",
        "import seaborn as sns\n",
        "fig, ax = plt.subplots(figsize=(7, 5))\n",
        "sns.scatterplot(x = eigvecs[:, 0], y = eigvecs[:, 1], hue=labels, ax=ax)\n",
        "ax.set_title('Spectral Embedding')\n",
        "ax.set_xlabel('Eigenvector 1')\n",
        "ax.set_ylabel('Eigenvector 2')\n",
        "plt.show()"
      ],
      "id": "be682c7c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Interestingly, the first eigenvector corresponds to the eigen centrality of the network, representing the centrality of the nodes.\n",
        "The second eigenvector captures the community structure of the network, clearly separating the two communities in the network.\n",
        "\n",
        "### Modularity Embedding\n",
        "\n",
        "In a similar vein, we can use the modularity matrix to generate a low-dimensional embedding of the network.\n",
        "Namely, let us define the modularity matrix $\\mathbf{Q}$ as follows:\n",
        "\n",
        "$$\n",
        "Q_{ij} = \\frac{1}{2m}A_{ij} - \\frac{k_i k_j}{4m^2}\n",
        "$$\n",
        "\n",
        "where $k_i$ is the degree of node $i$, and $m$ is the number of edges in the network.\n",
        "\n",
        "We then compute the eigenvectors of $\\mathbf{Q}$ and use them to embed the network into a low-dimensional space just as we did for the adjacency matrix."
      ],
      "id": "1dae261d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        ":tags: [hide-input]\n",
        "\n",
        "deg = np.sum(A, axis=1)\n",
        "m = np.sum(deg) / 2\n",
        "Q = A - np.outer(deg, deg) / (2 * m)\n",
        "Q/= 2*m\n",
        "\n",
        "eigvals, eigvecs = np.linalg.eig(Q)\n",
        "\n",
        "# Sort the eigenvalues and eigenvectors\n",
        "sorted_indices = np.argsort(-eigvals)[:d]  # Exclude the first eigenvector\n",
        "eigvals = eigvals[sorted_indices]\n",
        "eigvecs = eigvecs[:, sorted_indices]\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(7, 5))\n",
        "sns.scatterplot(x = eigvecs[:, 0], y = eigvecs[:, 1], hue=labels, ax=ax)\n",
        "ax.set_title('Modularity Embedding')\n",
        "ax.set_xlabel('Eigenvector 1')\n",
        "ax.set_ylabel('Eigenvector 2')\n",
        "plt.show()"
      ],
      "id": "380f49f5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "```{note}\n",
        "The modularity embedding can be used to bipartition the network into two communities using a simple algorithm: group nodes with the same sign of the second eigenvector {footcite}`newman2006modularity`.\n",
        "```\n",
        "\n",
        "### Laplacian Eigenmap\n",
        "\n",
        "Laplacian Eigenmap {footcite}`belkin2003laplacian` is another approach to compress a network into a low-dimensional space. The fundamental idea behind this method is to position connected nodes close to each other in the low-dimensional space. This approach leads to the following optimization problem:\n",
        "\n",
        "$$\n",
        "\\min_{\\mathbf{U}} J_{LE}(\\mathbf{U}),\\quad J_{LE}(\\mathbf{U}) = \\frac{1}{2}\\sum_{i,j} A_{ij} \\| u_i - u_j \\|^2\n",
        "$$\n",
        "\n",
        "In this equation, $\\| u_i - u_j \\|^2$ represents the squared distance between nodes $i$ and $j$ in the low-dimensional space. The goal is to minimize this distance for connected nodes (where $A_{ij} = 1$). The factor $\\frac{1}{2}$ is included for mathematical convenience in later calculations.\n",
        "\n",
        "To solve this optimization problem, we rewrite $J_{LE}(\\mathbf{U})$ as follows:\n",
        "\n",
        "$$\n",
        "\\begin{aligned}\n",
        "J_{LE}(\\mathbf{U}) &= \\frac{1}{2}\\sum_{i}\\sum_{j} A_{ij} \\| u_i - u_j \\|^2 \\\\\n",
        "&= \\frac{1}{2}\\sum_{i}\\sum_{j} A_{ij} \\left( \\| u_i \\|^2 - 2 u_i^\\top u_j + \\| u_j \\|^2 \\right) \\\\\n",
        "&= \\sum_{i}\\sum_{j} A_{ij} \\| u_i \\|^2 - \\sum_{i}\\sum_{j} A_{ij} u_i^\\top u_j\\\\\n",
        "&= \\sum_{i} k_i \\| u_i \\|^2 - \\sum_{i,j} A_{ij} u_i^\\top u_j\\\\\n",
        "&= \\sum_{i,j} L_{ij} u_i^\\top u_j\n",
        "\\end{aligned}\n",
        "$$\n",
        "\n",
        "where\n",
        "\n",
        "$$\n",
        "L_{ij} = \\begin{cases}\n",
        "k_i & \\text{if } i = j \\\\\n",
        "-A_{ij} & \\text{if } i \\neq j\n",
        "\\end{cases}\n",
        "$$\n",
        "\n",
        "The minimization problem can be rewritten as:\n",
        "\n",
        "$$\n",
        "J_{LE}(\\mathbf{U}) = \\text{Tr}(\\mathbf{U}^\\top \\mathbf{L} \\mathbf{U})\n",
        "$$\n",
        "\n",
        "where\n",
        "\n",
        "$$\n",
        "\\mathbf{U} =\n",
        "\\begin{bmatrix}\n",
        "\\mathbf{u}_1 ^\\top \\\\\n",
        "\\mathbf{u}_2 ^\\top \\\\\n",
        "\\vdots \\\\\n",
        "\\mathbf{u}_N ^\\top \\\\\n",
        "\\end{bmatrix}\n",
        "$$\n",
        "\n",
        "See the [Appendix section](./04-appendix.md) for the detailed derivation.\n",
        "\n",
        "By taking the derivative of $J_{LE}(\\mathbf{U})$ with respect to $\\mathbf{U}$ and set it to zero, we obtain the following equation:\n",
        "\n",
        "$$\n",
        "\\frac{\\partial J_{LE}}{\\partial \\mathbf{U}} = 0 \\implies \\mathbf{L} \\mathbf{U} = \\lambda \\mathbf{U}\n",
        "$$\n",
        "\n",
        "The solution is the $d$ eigenvectors associated with the $d$ smallest eigenvalues of $\\mathbf{L}$.\n",
        "\n",
        "It is important to note that the eigenvector corresponding to the smallest eigenvalue (which is always zero for connected graphs) is trivial - it's the all-one vector. Therefore, in practice, we typically compute the $d+1$ smallest eigenvectors and discard the one corresponding to the zero eigenvalue.\n",
        "\n",
        "### Example: Laplacian Eigenmap\n",
        "\n",
        "Let us first compute the Laplacian matrix and its eigenvectors."
      ],
      "id": "424fe90c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        ":tags: [hide-input]\n",
        "\n",
        "D = np.diag(np.sum(A, axis=1))\n",
        "L = D - A\n",
        "\n",
        "eigvals, eigvecs = np.linalg.eig(L)\n",
        "\n",
        "# Sort the eigenvalues and eigenvectors\n",
        "sorted_indices = np.argsort(eigvals)[1:d+1]  # Exclude the first eigenvector\n",
        "eigvals = eigvals[sorted_indices]\n",
        "eigvecs = eigvecs[:, sorted_indices]"
      ],
      "id": "6b6b0454",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The eigenvectors corresponding to the $d$ smallest eigenvalues are:"
      ],
      "id": "508423f1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        ":tags: [hide-input]\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(7, 5))\n",
        "sns.scatterplot(x = eigvecs[:, 0], y = eigvecs[:, 1], hue=labels, ax=ax)\n",
        "ax.set_title('Laplacian Eigenmap')\n",
        "ax.set_xlabel('Eigenvector 2')\n",
        "ax.set_ylabel('Eigenvector 3')\n",
        "plt.show()"
      ],
      "id": "f7f3fc3d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Neural Embedding with word2vec\n",
        "\n",
        "### Introduction to word2vec\n",
        "\n",
        "In this section, we will introduce *word2vec*, a powerful technique for learning word embeddings. word2vec is a neural network model that learns words embeddings in a continuous vector space. It was introduced by Tomas Mikolov and his colleagues at Google in 2013 {footcite}`mikolov2013distributed`.\n",
        "\n",
        "### How it works\n",
        "\n",
        "\"You shall know a word by the company it keeps\" {footcite}`church1988word` is a famous quote in linguistics. It means that you can understand the meaning of a word by looking at the words that appear in the same context.\n",
        "word2vec operates on the same principle.\n",
        "word2vec identifies a word's context by examining the words within a fixed window around it. For example, in the sentence:\n",
        "\n",
        "> The quick brown fox jumps over a lazy dog\n",
        "\n",
        "The context of the word *fox* includes *quick*, *brown*, *jumps*, *over*, and *lazy*. word2vec is trained to predict which words are likely to appear as the context of an input word.\n",
        "\n",
        "```{note}\n",
        "There are two main architectures for word2vec:\n",
        "1. **Continuous Bag of Words (CBOW)**: Predicts the target word (center word) from the context words (surrounding words).\n",
        "2. **Skip-gram**: Predicts the context words (surrounding words) from the target word (center word).\n",
        "```\n",
        "\n",
        "So how are word embeddings learned? word2vec is a neural network model that looks like a bow tie. It has two layers of the vocabulary size coupled with a much smaller hidden layer.\n",
        "\n",
        "![](../figs/word2vec.png)\n",
        "\n",
        "- **Input layer**: The input layer consists of $N$ neurons, where $N$ is the size of the vocabulary (i.e., the number of unique words in the corpus). Each neuron corresponds to a unique word in the vocabulary. When a word is inputted, its corresponding neuron is activated and the other neurons are inhibited. Thus, the input layer is essentially a lookup mechanism that transforms the input word into a corresponding one-hot vector.\n",
        "\n",
        "- **Output layer**: The output layer also consists of $N$ neurons, each corresponding to a unique word in the vocabulary. Unlike the input layer, multiple neurons can be activated for a single input. The strength of the activation of each neuron (with a normalization by the softmax function) represents the probability of the corresponding word being the input word's context.\n",
        "\n",
        "- **Hidden layer**: The hidden layer is much smaller than the input and output layers. Multiple neurons in the hidden layer can be activated for a single input, and this activation pattern represents the word's *embedding*.\n",
        "\n",
        "We can consider word2vec as a *dimensionality reduction* technique that reduces the dimensionality of the input layer to the hidden layer based on the co-occurrence of words within a short distance. The distance is named the *window size*, which is a user-defined hyperparameter.\n",
        "\n",
        "### What's special about word2vec?\n",
        "\n",
        "With word2vec, words are represented as dense vectors, enabling us to explore their relationships using simple linear algebra. This is in contrast to traditional natural language processing (NLP) methods, such as bag-of-words and topic modeling, which represent words as discrete units or high-dimensional vectors.\n",
        "\n",
        "![](https://miro.medium.com/v2/resize:fit:678/1*5F4TXdFYwqi-BWTToQPIfg.jpeg)\n",
        "\n",
        "To showcase the effectiveness of word2vec, let's walk through an example using the `gensim` library."
      ],
      "id": "787faf05"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import gensim\n",
        "import gensim.downloader\n",
        "from gensim.models import Word2Vec\n",
        "\n",
        "# Load pre-trained word2vec model from Google News\n",
        "model = gensim.downloader.load('word2vec-google-news-300')"
      ],
      "id": "572defdc",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Our first example is to find the words most similar to *king*."
      ],
      "id": "4d6b9d80"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Example usage\n",
        "word = \"king\"\n",
        "similar_words = model.most_similar(word)\n",
        "print(f\"Words most similar to '{word}':\")\n",
        "for similar_word, similarity in similar_words:\n",
        "    print(f\"{similar_word}: {similarity:.4f}\")"
      ],
      "id": "d8abb4f7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "A cool (yet controversial) application of word embeddings is analogy solving. Let us consider the following puzzle:\n",
        "\n",
        "> *man* is to *woman* as *king* is to ___ ?\n",
        "\n",
        "We can use word embeddings to solve this puzzle."
      ],
      "id": "b0f81132"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# We solve the puzzle by\n",
        "#\n",
        "#  vec(king) - vec(man) + vec(woman)\n",
        "#\n",
        "# To solve this, we use the model.most_similar function, with positive words being \"king\" and \"woman\" (additive), and negative words being \"man\" (subtractive).\n",
        "#\n",
        "model.most_similar(positive=['woman', \"king\"], negative=['man'], topn=5)"
      ],
      "id": "8b4627d9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The last example is to visualize the word embeddings."
      ],
      "id": "77bd5b28"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        ":tags: [hide-input]\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.decomposition import PCA\n",
        "\n",
        "countries = ['Germany', 'France', 'Italy', 'Spain', 'Portugal', 'Greece']\n",
        "capital_words = ['Berlin', 'Paris', 'Rome', 'Madrid', 'Lisbon', 'Athens']\n",
        "\n",
        "# Get the word embeddings for the countries and capitals\n",
        "country_embeddings = np.array([model[country] for country in countries])\n",
        "capital_embeddings = np.array([model[capital] for capital in capital_words])\n",
        "\n",
        "# Compute the PCA\n",
        "pca = PCA(n_components=2)\n",
        "embeddings = np.vstack([country_embeddings, capital_embeddings])\n",
        "embeddings_pca = pca.fit_transform(embeddings)\n",
        "\n",
        "# Create a DataFrame for seaborn\n",
        "df = pd.DataFrame(embeddings_pca, columns=['PC1', 'PC2'])\n",
        "df['Label'] = countries + capital_words\n",
        "df['Type'] = ['Country'] * len(countries) + ['Capital'] * len(capital_words)\n",
        "\n",
        "# Plot the data\n",
        "plt.figure(figsize=(12, 10))\n",
        "\n",
        "# Create a scatter plot with seaborn\n",
        "scatter_plot = sns.scatterplot(data=df, x='PC1', y='PC2', hue='Type', style='Type', s=200, palette='deep', markers=['o', 's'])\n",
        "\n",
        "# Annotate the points\n",
        "for i in range(len(df)):\n",
        "    plt.text(df['PC1'][i], df['PC2'][i] + 0.08, df['Label'][i], fontsize=12, ha='center', va='bottom',\n",
        "             bbox=dict(facecolor='white', edgecolor='none', alpha=0.8))\n",
        "\n",
        "# Draw arrows between countries and capitals\n",
        "for i in range(len(countries)):\n",
        "    plt.arrow(df['PC1'][i], df['PC2'][i], df['PC1'][i + len(countries)] - df['PC1'][i], df['PC2'][i + len(countries)] - df['PC2'][i],\n",
        "              color='gray', alpha=0.6, linewidth=1.5, head_width=0.02, head_length=0.03)\n",
        "\n",
        "plt.legend(title='Type', title_fontsize='13', fontsize='11')\n",
        "plt.title('PCA of Country and Capital Word Embeddings', fontsize=16)\n",
        "plt.xlabel('Principal Component 1', fontsize=14)\n",
        "plt.ylabel('Principal Component 2', fontsize=14)\n",
        "ax = plt.gca()\n",
        "ax.set_axis_off()"
      ],
      "id": "b7f90797",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "We can see that word2vec places the words representing countries close to each other and so do the words representing their capitals. The country-capital relationship is also roughly preserved, e.g., *Germany*-*Berlin* vector is roughly parallel to *France*-*Paris* vector.\n",
        "\n",
        "## Graph Embedding with word2vec\n",
        "\n",
        "How can we apply word2vec to graph data? There is a critical challenge: word2vec takes sequence of words as input, while graph data are discrete and unordered. A solution to fill this gap is *random walk*, which transforms graph data into a sequence of nodes. Once we have a sequence of nodes, we can treat it as a sequence of words and apply word2vec.\n",
        "\n",
        "### DeepWalk\n",
        "\n",
        "![](https://dt5vp8kor0orz.cloudfront.net/7c56c256b9fbf06693da47737ac57fae803a5a4f/1-Figure1-1.png)\n",
        "\n",
        "DeepWalk is one of the pioneering works to apply word2vec to graph data {footcite}`perozzi2014deepwalk`. It views the nodes as words and the nodes random walks on the graph as sentences, and applies word2vec to learn the node embeddings.\n",
        "\n",
        "More specifically, the method contains the following steps:\n",
        "\n",
        "1. Sample multiple random walks from the graph.\n",
        "2. Treat the random walks as sentences and feed them to word2vev to learn the node embeddings.\n",
        "\n",
        "There are some technical details that we need to be aware of, which we will learn by implementing DeepWalk in the following exercise.\n",
        "\n",
        "### Exercise 01: Implement DeepWalk\n",
        "\n",
        "In this exercise, we implement DeepWalk step by step.\n",
        "\n",
        "##### Step 1: Data preparation\n",
        "\n",
        "We will use the karate club network as an example.\n",
        "\n",
        "**Load the data**"
      ],
      "id": "aa86aaa4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        ":tags: [hide-input]\n",
        "\n",
        "import igraph\n",
        "import networkx as nx\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "\n",
        "g = igraph.Graph.Famous(\"Zachary\")\n",
        "A = g.get_adjacency_sparse()\n",
        "\n",
        "# Add the community labels to the nodes for visualization\n",
        "g.vs[\"label\"] = np.unique([d[1]['club'] for d in nx.karate_club_graph().nodes(data=True)], return_inverse=True)[1]\n",
        "\n",
        "palette = sns.color_palette().as_hex()\n",
        "igraph.plot(g, vertex_color=[palette[label] for label in g.vs[\"label\"]], bbox=(300, 300))"
      ],
      "id": "12c0c708",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### Step 2: Generate random walks\n",
        "\n",
        "Next, we generate the training data for the word2vec model by generating multiple random walks starting from each node in the network.\n",
        "Let us first implement a function to sample random walks from a given network."
      ],
      "id": "1f7f20c9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "def random_walk(net, start_node, walk_length):\n",
        "    # Initialize the walk with the starting node\n",
        "    walk = [start_node]\n",
        "\n",
        "    # Continue the walk until the desired length is reached\n",
        "    while len(walk) < walk_length:\n",
        "        # Get the current node (the last node in the walk)\n",
        "        cur = walk[-1]\n",
        "\n",
        "        # Get the neighbors of the current node\n",
        "        cur_nbrs = list(net[cur].indices)\n",
        "\n",
        "        # If the current node has neighbors, randomly choose one and add it to the walk\n",
        "        if len(cur_nbrs) > 0:\n",
        "            walk.append(np.random.choice(cur_nbrs))\n",
        "        else:\n",
        "            # If the current node has no neighbors, terminate the walk\n",
        "            break\n",
        "\n",
        "    # Return the generated walk\n",
        "    return walk"
      ],
      "id": "aa475e28",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Generate 10 random walks of length 50 starting from each node."
      ],
      "id": "4bbd8202"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "n_nodes = g.vcount()\n",
        "n_walkers_per_node = 10\n",
        "walk_length = 50\n",
        "walks = []\n",
        "for i in range(n_nodes):\n",
        "    for _ in range(n_walkers_per_node):\n",
        "        walks.append(random_walk(A, i, walk_length))"
      ],
      "id": "b0bb5506",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### Step 3: Train the word2vec model\n",
        "Then, we feed the random walks to the word2vec model."
      ],
      "id": "7f2d116e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from gensim.models import Word2Vec\n",
        "\n",
        "model = Word2Vec(walks, vector_size=32, window=3, min_count=1, sg=1, hs = 1)"
      ],
      "id": "bb857b9c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Here,\n",
        "\n",
        "- `vector_size` is the dimension of the embedding vectors.\n",
        "- `window` indicates the maximum distance between a word and its context words. For example, in the random walk `[0, 1, 2, 3, 4, 5, 6, 7]`, the context words of node 2 are `[0, 1, 3, 4, 5]` when `window=3`.\n",
        "- `min_count` is the minimum number of times a word must appear in the training data to be included in the vocabulary.\n",
        "\n",
        "Two parameters `sg=1` and `hs=1` indicate that we are using the skip-gram model with negative sampling. Let us understand what they mean in detail as follows.\n",
        "\n",
        "- **Skip-gram model**: it trains word2vec by predicting context words given a target word. For example, given the sentence \"The quick brown fox jumps over the lazy dog\", in the skip-gram model, given the target word \"fox\", the model will try to predict the context words \"quick\", \"brown\", \"jumps\", and \"over\". If `sg=0`, the input and output are swapped: the model will predict the target word from the context words, e.g., given the context words \"quick\", \"brown\", \"jumps\", and \"over\", the model will predict the target word \"fox\".\n",
        "\n",
        "- **Hierarchical softmax**: To understand hierarchical softmax better, let's break down how the word2vec model works. The goal of word2vec is to predict context words given a target word. For example, if our target word is $w_t$ and our context word is $w_c$, we want to find the probability of $w_c$ given $w_t$. This probability is calculated using the softmax function:\n",
        "\n",
        "    $$\n",
        "    P(w_c | w_t) = \\frac{\\exp(\\mathbf{v}_{w_c} \\cdot \\mathbf{v}_{w_t})}{\\sum_{w \\in V} \\exp(\\mathbf{v}_w \\cdot \\mathbf{u}_{w_t})}\n",
        "   $$\n",
        "\n",
        "    Here, $\\mathbf{v}_w$ and $\\mathbf{u}_w$ represent the vector for word $w$ as context and target respectively, and $V$ is the entire vocabulary. The tricky part is the denominator, which requires summing over all words in the vocabulary. If we have a large vocabulary, this can be very computationally expensive. Imagine having to compute 100,000 exponentials and their sum for each training example if our vocabulary size is 100,000!\n",
        "\n",
        "    Hierarchical softmax helps us solve this problem. Instead of calculating the probability directly, it organizes the vocabulary into a binary tree, where each word is a leaf node. To find the probability of a word, we calculate the product of probabilities along the path from the root to the leaf node. This method significantly reduces the computational complexity. Instead of being proportional to the vocabulary size, it becomes proportional to the logarithm of the vocabulary size. This makes it much more efficient, especially for large vocabularies.\n",
        "\n",
        "    ![](https://lh5.googleusercontent.com/proxy/_omrC8G6quTl2SGarwFe57qzbIs-PtGkEA5yODFE5I0Ny2IHGiJwsUhMrcuUqg5o-R2nD9hkgMuZsQJKoCggP29zXtj-Vz-X8BE)\n",
        "\n",
        "By using the skip-gram model with hierarchical softmax, we can efficiently learn high-quality word embeddings even when dealing with large vocabularies.\n",
        "\n",
        "Now, we extract the node embeddings from the word2vec model. In the word2vec model, the embeddings are stored in the `wv` attribute. The embedding of node $i$ is given by `model.wv[i]`."
      ],
      "id": "1f68eee7"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "embedding = []\n",
        "for i in range(n_nodes):\n",
        "    embedding.append(model.wv[i])\n",
        "embedding = np.array(embedding)"
      ],
      "id": "cfee8db4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "`embedding` is the matrix of node embeddings. It has the same number of rows as the number of nodes in the network, and the number of columns is the embedding dimension.\n",
        "\n",
        "**Print the first 3 nodes**"
      ],
      "id": "6f4adc8e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        ":tags: [hide-input]\n",
        "\n",
        "embedding[:3]"
      ],
      "id": "c03e581b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Let's visualize the node embeddings using UMAP."
      ],
      "id": "7d1be69e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        ":tags: [hide-input]\n",
        "import umap\n",
        "from bokeh.plotting import figure, show\n",
        "from bokeh.io import output_notebook\n",
        "from bokeh.models import ColumnDataSource, HoverTool\n",
        "\n",
        "\n",
        "reducer = umap.UMAP(n_components=2, random_state=42, n_neighbors=15, metric=\"cosine\")\n",
        "xy = reducer.fit_transform(embedding)\n",
        "\n",
        "output_notebook()\n",
        "\n",
        "# Calculate the degree of each node\n",
        "degrees = A.sum(axis=1).A1\n",
        "\n",
        "source = ColumnDataSource(data=dict(\n",
        "    x=xy[:, 0],\n",
        "    y=xy[:, 1],\n",
        "    size=np.sqrt(degrees / np.max(degrees)) * 30,\n",
        "    community=[palette[label] for label in g.vs[\"label\"]]\n",
        "))\n",
        "\n",
        "p = figure(title=\"Node Embeddings from Word2Vec\", x_axis_label=\"X\", y_axis_label=\"Y\")\n",
        "\n",
        "p.scatter('x', 'y', size='size', source=source, line_color=\"black\", color=\"community\")\n",
        "\n",
        "show(p)"
      ],
      "id": "6e692b3a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### Step 4: Clustering\n",
        "\n",
        "One of the interesting applications with node embeddings is clustering. While we have good community detection methods, like the modularity maximization and stochastic block model, we can use clustering methods from machine learning, such as $K$-means and Gaussian mixture model. Let's see what we can get from the node embeddings."
      ],
      "id": "427207aa"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from sklearn.cluster import KMeans\n",
        "from sklearn.metrics import silhouette_score\n",
        "\n",
        "# Determine the optimal number of clusters using the silhouette score\n",
        "def Kmeans_with_silhouette(embedding, n_clusters_range=(2, 10)):\n",
        "    silhouette_scores = []\n",
        "\n",
        "    # Iterate over a range of cluster numbers from 2 to 9\n",
        "    for n_clusters in range(*n_clusters_range):\n",
        "        # Create a KMeans object with the current number of clusters\n",
        "        kmeans = KMeans(n_clusters=n_clusters)\n",
        "\n",
        "        # Fit the KMeans model to the embedding data\n",
        "        kmeans.fit(embedding)\n",
        "\n",
        "        # Calculate the silhouette score for the current clustering\n",
        "        score = silhouette_score(embedding, kmeans.labels_)\n",
        "\n",
        "        # Append the number of clusters and its corresponding silhouette score to the list\n",
        "        silhouette_scores.append((n_clusters, score))\n",
        "\n",
        "    # Find the number of clusters that has the highest silhouette score\n",
        "    optimal_n_clusters = max(silhouette_scores, key=lambda x: x[1])[0]\n",
        "\n",
        "    # Create a KMeans object with the optimal number of clusters\n",
        "    kmeans = KMeans(n_clusters=optimal_n_clusters)\n",
        "\n",
        "    # Fit the KMeans model to the embedding data with the optimal number of clusters\n",
        "    kmeans.fit(embedding)\n",
        "\n",
        "    # Return the labels (cluster assignments) for each data point\n",
        "    return kmeans.labels_"
      ],
      "id": "0b46c6cd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import seaborn as sns\n",
        "labels = Kmeans_with_silhouette(embedding)\n",
        "cmap = sns.color_palette().as_hex()\n",
        "igraph.plot(g, vertex_color=[cmap[label] for label in labels], bbox=(500, 500))"
      ],
      "id": "2f187a48",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### node2vec\n",
        "\n",
        "node2vec is a sibling of DeepWalk proposed by {footcite}`grover2016node2vec`. Both use word2vec trained on random walks on networks. So, it appears that they are very similar. However, the following two components make them very different.\n",
        "\n",
        "- **Biased random walk**: node2vec uses biased random walks that can move in different directions. The bias walk is parameterized by two parameters, $p$ and $q$:\n",
        "\n",
        "    $$\n",
        "    P(v_{t+1} = x | v_t = v, v_{t-1} = t) \\propto\n",
        "    \\begin{cases}\n",
        "    \\frac{1}{p} & \\text{if } d(v,t) = 0 \\\\\n",
        "    1 & \\text{if } d(v,t) = 1 \\\\\n",
        "    \\frac{1}{q} & \\text{if } d(v,t) = 2 \\\\\n",
        "    \\end{cases}\n",
        "    $$\n",
        "\n",
        "    where $d(v,x)$ is the shortest path distance between node $v$ and $x$. A smaller $p$ leads to more biased towards the previous node, $v_{t-1} = t$. A smaller $q$ leads to more biased towards the nodes that are further away from the previous node, $v_{t-1} = t$.\n",
        "\n",
        "    By adjusting the parameters $p$ and $q$, we can influence the random walk to behave more like either breadth-first sampling (BFS) or depth-first sampling (DFS).\n",
        "\n",
        "    - **Breadth-First Sampling (BFS)**: This type of sampling explores all the neighbors of a node before moving on to the next level of neighbors. It is useful for capturing community structures within the graph. When we set the parameters to favor BFS, the resulting embeddings will reflect these community structures.\n",
        "\n",
        "    - **Depth-First Sampling (DFS)**: This type of sampling goes deep into the graph, exploring as far as possible along each branch before backtracking. It is useful for capturing structural equivalence, where nodes that have similar roles in the graph (even if they are not directly connected) are represented similarly. When we set the parameters to favor DFS, the resulting embeddings will reflect these structural equivalences.\n",
        "\n",
        "    ![](https://www.researchgate.net/publication/354654762/figure/fig3/AS:1069013035655173@1631883977008/A-biased-random-walk-procedure-of-node2vec-B-BFS-and-DFS-search-strategies-from-node-u.png)\n",
        "\n",
        "    The embeddings generated by node2vec can capture different aspects of the graph depending on the sampling strategy used. With BFS, we capture community structures, and with DFS, we capture structural equivalence.\n",
        "\n",
        "    ![](https://miro.medium.com/v2/resize:fit:1138/format:webp/1*nCyF5jFSU5uJVdAPdf-0HA.png)\n",
        "\n",
        "- **Negative sampling**: node2vec uses negative sampling, instead of hierarchical softmax. This difference appears to be minor, but it has significant consequences on the characteristics of the embeddings. This is beyond the scope of this lecture, but you can refer to {footcite}`kojaku2021neurips` and {footcite}`dyer2014notes` for more details.\n",
        "\n",
        "### Exercise 02: Implement node2vec\n",
        "\n",
        "Let's implement the biased random walk for node2vec"
      ],
      "id": "894f38f2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "def node2vec_random_walk(net, start_node, walk_length, p, q):\n",
        "    \"\"\"\n",
        "    Sample a random walk starting from start_node.\n",
        "    \"\"\"\n",
        "    # Initialize the walk with the start_node\n",
        "    walk = [start_node]\n",
        "\n",
        "    # Continue the walk until it reaches the desired length\n",
        "    while len(walk) < walk_length:\n",
        "        # Get the current node in the walk\n",
        "        cur = walk[-1]\n",
        "        # Get the neighbors of the current node\n",
        "        cur_nbrs = list(net[cur].indices)\n",
        "        # Check if the current node has any neighbors\n",
        "        if len(cur_nbrs) > 0:\n",
        "            # If the walk has just started, randomly choose the next node from the neighbors\n",
        "            if len(walk) == 1:\n",
        "                walk.append(np.random.choice(cur_nbrs))\n",
        "            else:\n",
        "                # Get the previous node in the walk\n",
        "                prev = walk[-2]\n",
        "                # Use the alias sampling method to choose the next node based on the bias parameters p and q\n",
        "                next_node = alias_sample(net, cur_nbrs, prev, p, q)\n",
        "                # Append the chosen next node to the walk\n",
        "                walk.append(next_node)\n",
        "        else:\n",
        "            # If the current node has no neighbors, terminate the walk\n",
        "            break\n",
        "\n",
        "    return walk\n",
        "\n",
        "def alias_sample(net, neighbors, prev, p, q):\n",
        "    \"\"\"\n",
        "    Helper function to sample the next node in the walk.\n",
        "    \"\"\"\n",
        "    # Implement the logic to sample the next node based on the bias parameters p and q\n",
        "    # You can use the formula provided in the instructions to calculate the probabilities\n",
        "    # and then sample the next node accordingly.\n",
        "    # Initialize an empty list to store the unnormalized probabilities for each neighbor\n",
        "    unnormalized_probs = []\n",
        "\n",
        "    # Iterate over each neighbor of the current node\n",
        "    for neighbor in neighbors:\n",
        "        # If the neighbor is the same as the previous node in the walk\n",
        "        if neighbor == prev:\n",
        "            # Append the probability 1/p to the unnormalized probabilities list\n",
        "            unnormalized_probs.append(1 / p)\n",
        "        # If the neighbor is connected to the previous node in the walk\n",
        "        elif neighbor in net[prev].indices:\n",
        "            # Append the probability 1 to the unnormalized probabilities list\n",
        "            unnormalized_probs.append(1)\n",
        "        # If the neighbor is not connected to the previous node in the walk\n",
        "        else:\n",
        "            # Append the probability 1/q to the unnormalized probabilities list\n",
        "            unnormalized_probs.append(1 / q)\n",
        "\n",
        "    # Calculate the normalization constant by summing all unnormalized probabilities\n",
        "    norm_const = sum(unnormalized_probs)\n",
        "\n",
        "    # Normalize the probabilities by dividing each unnormalized probability by the normalization constant\n",
        "    normalized_probs = [float(prob) / norm_const for prob in unnormalized_probs]\n",
        "\n",
        "    # Randomly choose the next node from the neighbors based on the normalized probabilities\n",
        "    next_node = np.random.choice(neighbors, size=1, p=normalized_probs)[0]\n",
        "\n",
        "    # Return the chosen next node\n",
        "    return next_node"
      ],
      "id": "44bafc4f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Now, let's set up the word2vec model for node2vec."
      ],
      "id": "340697c0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "walks = []\n",
        "p = 1\n",
        "q = 0.1\n",
        "for i in range(n_nodes):\n",
        "    for _ in range(n_walkers_per_node):\n",
        "        walks.append(node2vec_random_walk(A, i, walk_length, p, q))\n",
        "model = Word2Vec(walks, vector_size=32, window=3, min_count=1, sg=1, hs = 1)"
      ],
      "id": "498822bd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "where `hs=0` indicates that we are using negative sampling.\n",
        "Notice that we set `sg=1` and `hs=1` instead of `sg=1` and `hs=0` in DeepWalk. This is because node2vec uses the skip-gram model with negative sampling.\n",
        "\n",
        "Now, we extract the node embeddings from the word2vec model."
      ],
      "id": "fcffa88e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "embedding = []\n",
        "for i in range(n_nodes):\n",
        "    embedding.append(model.wv[i])\n",
        "embedding = np.array(embedding)"
      ],
      "id": "3f962e89",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Let's visualize the node embeddings from node2vec."
      ],
      "id": "fb12c958"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        ":tags: [hide-input]\n",
        "\n",
        "reducer = umap.UMAP(n_components=2, random_state=42, n_neighbors=15, metric=\"cosine\")\n",
        "xy = reducer.fit_transform(embedding)\n",
        "\n",
        "output_notebook()\n",
        "\n",
        "# Calculate the degree of each node\n",
        "degrees = A.sum(axis=1).A1\n",
        "\n",
        "source = ColumnDataSource(data=dict(\n",
        "    x=xy[:, 0],\n",
        "    y=xy[:, 1],\n",
        "    size=np.sqrt(degrees / np.max(degrees)) * 30,\n",
        "    community=[palette[label] for label in g.vs[\"label\"]],\n",
        "    name = [str(i) for i in range(n_nodes)]\n",
        "))\n",
        "\n",
        "p = figure(title=\"Node Embeddings from Word2Vec\", x_axis_label=\"X\", y_axis_label=\"Y\")\n",
        "\n",
        "p.scatter('x', 'y', size='size', source=source, line_color=\"black\", color=\"community\")\n",
        "\n",
        "hover = HoverTool()\n",
        "hover.tooltips = [\n",
        "    (\"Name\", \"@name\"),\n",
        "    (\"Community\", \"@community\")\n",
        "]\n",
        "p.add_tools(hover)\n",
        "\n",
        "show(p)"
      ],
      "id": "24ed13ea",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The results for clustering are as follows:"
      ],
      "id": "758c344d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import seaborn as sns\n",
        "\n",
        "labels = Kmeans_with_silhouette(embedding)\n",
        "\n",
        "\n",
        "cmap = sns.color_palette().as_hex()\n",
        "igraph.plot(g, vertex_color=[cmap[label] for label in labels], bbox=(500, 500), vertex_label=[\"%d\" %  d for d in  np.arange(n_nodes)])"
      ],
      "id": "dddabb51",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### LINE\n",
        "\n",
        "LINE {footcite}`tang2015line` is another pioneering work to learn node embeddings by directly optimizing the graph structure.\n",
        "It is equivalent to node2vec with $p=1$, $q=1$, and window size 1.\n",
        "\n",
        "```{footbibliography}\n",
        "```"
      ],
      "id": "6d1999f0"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "netdatasci",
      "language": "python",
      "display_name": "netdatasci",
      "path": "/Users/skojaku-admin/Library/Jupyter/kernels/netdatasci"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}