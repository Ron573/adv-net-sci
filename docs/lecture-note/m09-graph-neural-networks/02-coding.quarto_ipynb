{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Coding: Graph Neural Networks Implementation\n",
        "\n",
        "## Preliminaries: Image Processing\n",
        "\n",
        "Graph Neural Networks are a type of neural network for graph data. node2vec and deepwalk stem from the idea of language modeling.\n",
        "In this module, we will focus on another branch of graph neural networks that stem from image processing.\n",
        "\n",
        "### Edge Detection Problem in Image Processing\n",
        "\n",
        "Edge detection is a classical problem in image processing. The goal is to identify the boundaries of objects in an image.\n",
        "\n",
        "![](https://media.geeksforgeeks.org/wp-content/uploads/20240616211411/Screenshot-(85).webp)\n",
        "\n",
        "To approach the problem, let us first remind that an image is a matrix of pixels. Each pixel has RGB values, each of which represents the intensity of red, green, and blue color. To simplify the problem, we focus on grayscale images, in which each pixel has only one value representing the brightness. In this case, an image can be represented as a 2D matrix, where each element in the matrix represents the brightness of a pixel.\n",
        "\n",
        "![](https://ai.stanford.edu/~syyeung/cvweb/Pictures1/imagematrix.png)\n",
        "\n",
        "### An example\n",
        "\n",
        "Human eyes are very sensitive to brightness changes. An edge in an image appears when there is a *significant brightness change between adjacent pixels*. To be more concrete, let's consider a small example consisting of 6x6 pixels, with a vertical line from the top to the bottom, where the brightness is higher than the neighboring pixels. This is an edge we want to detect.\n",
        "\n",
        "$$\n",
        "X = \\begin{bmatrix}\n",
        "10 & 10 & 80 & 10 & 10 & 10 \\\\\n",
        "10 & 10 & 80 & 10 & 10 & 10 \\\\\n",
        "10 & 10 & 80 & 10 & 10 & 10 \\\\\n",
        "10 & 10 & 80 & 10 & 10 & 10 \\\\\n",
        "10 & 10 & 80 & 10 & 10 & 10 \\\\\n",
        "10 & 10 & 80 & 10 & 10 & 10\n",
        "\\end{bmatrix}\n",
        "$$\n",
        "\n",
        "Let's zoom on the pixel at (3, 3) and its surrounding pixels.\n",
        "\n",
        "$$\n",
        "Z = \\begin{bmatrix}\n",
        "10 & 80 & 10 \\\\\n",
        "\\textcolor{blue}{10} & \\textcolor{red}{80} & \\textcolor{purple}{10} \\\\\n",
        "10 & 80 & 10\n",
        "\\end{bmatrix}\n",
        "$$\n",
        "\n",
        "where the central pixel is highlighted in red. Since we are interested in the edge which is a sudden change in brightness along the horizontal direction, we take a derivative at the central pixel by\n",
        "\n",
        "$$\n",
        "\\nabla Z_{22} = \\textcolor{blue}{Z_{2,1}} - \\textcolor{purple}{Z_{2,3}}\n",
        "$$\n",
        "\n",
        "Following the same process, we can compute the derivative at all pixels, which gives us the (horizontal) derivative of the image.\n",
        "\n",
        "$$\n",
        "\\begin{bmatrix}\n",
        "- & -70 & 0 & 70 & 0 & - \\\\\n",
        "- & -70 & 0 & 70 & 0 & - \\\\\n",
        "- & -70 & 0 & 70 & 0 & - \\\\\n",
        "- & -70 & 0 & 70 & 0 & - \\\\\n",
        "- & -70 & 0 & 70 & 0 & -\n",
        "\\end{bmatrix}\n",
        "$$\n",
        "\n",
        "The symbol `-` indicates that the derivative is not defined because one of the neighboring pixels is out of the image boundary.\n",
        "We observe that the derivative is high at the edge and low elsewhere. This is a simple but effective way to detect edges in an image.\n",
        "\n",
        "We can consider a derivative operator along the vertical direction that computes the difference between the vertical neighboring pixels.\n",
        "\n",
        "$$\n",
        "\\nabla Z_{22} = Z_{1,2} - Z_{3,2}\n",
        "$$\n",
        "\n",
        "And, when applied to the entire image, the result is\n",
        "\n",
        "$$\n",
        "\\begin{bmatrix}\n",
        "- & - & - & - & -  & - \\\\\n",
        "0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
        "0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
        "0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
        "- & - & - & - & - & -\n",
        "\\end{bmatrix}\n",
        "$$\n",
        "\n",
        "The all entries are zero, meaning that there is no edge in the vertical direction.\n",
        "\n",
        "We can combine the horizontal and vertical derivatives to get the gradient of the image. For example,\n",
        "\n",
        "$$\n",
        "\\nabla Z_{22} = Z_{12} - Z_{32} + Z_{21} - Z_{23}\n",
        "$$\n",
        "\n",
        "When applied to the entire image, the result is the same as the horizontal derivative.\n",
        "\n",
        "### Convolution\n",
        "\n",
        "We observe that there is a repeated pattern in the derivative computation: we are taking addition and subtraction of neighbiring pixels. This motivates us to generalize the operation to a more general form.\n",
        "\n",
        "$$\n",
        "\\nabla Z_{22} = \\sum_{i=-1}^1 \\sum_{j=-1}^1 K_{h-(i+1),w-(j+1)} Z_{2+i, 2+j}\n",
        "$$\n",
        "\n",
        "where $K$ is a $3 \\times 3$ matrix, and $w=h=3$ represent the width and height of the kernel.\n",
        "\n",
        "$$\n",
        "K_{\\text{horizontal}} = \\begin{bmatrix}\n",
        "0 & 0 & 0 \\\\\n",
        "-1 & 0 & 1 \\\\\n",
        "0 & 0 & 0\n",
        "\\end{bmatrix},\\quad\n",
        "K_{\\text{vertical}} = \\begin{bmatrix}\n",
        "0 & -1 & 0 \\\\\n",
        "0 & 0 & 0 \\\\\n",
        "0 & 1 & 0\n",
        "\\end{bmatrix}\n",
        "$$\n",
        "\n",
        "The operation of $K$ on the image is called *convolution*, and $K$ is called the *kernel* or *filter*. More generally, the convolution of a kernel $K$ and an image $X$ is defined as\n",
        "\n",
        "$$\n",
        "Y_{ij} = \\sum_{p}\\sum_{q} K_{pq} X_{i+p-\\frac{h+1}{2}, j+q-\\frac{w+1}{2}}\n",
        "$$\n",
        "\n",
        "where $h$ and $w$ are the height and width of the kernel, respectively.\n",
        "\n",
        "## From Image to Graph\n",
        "\n",
        "### Analogy between image and graph data\n",
        "We can think of a convolution of an image from the perspective of networks.\n",
        "In the convolution of an image, a pixel is convolved with its *neighbors*. We can regard each pixel as a node, and each node is connected to its neighboring nodes (pixels) that are involved in the convolution.\n",
        "\n",
        "![](https://av-eks-lekhak.s3.amazonaws.com/media/__sized__/article_images/conv_graph-thumbnail_webp-600x300.webp)\n",
        "\n",
        "Building on this analogy, we can extend the idea of convolution to general graph data.\n",
        "Each node has a pixel value(s) (e.g., feature vector), which is convolved with the values of its neighbors in the graph.\n",
        "This is the key idea of graph convolutional networks.\n",
        "But, there is a key difference: while the number of neighbors for an image is homogeneous, the number of neighbors for a node in a graph can be heterogeneous. Each pixel has the same number of neighbors (except for the boundary pixels), but nodes in a graph can have very different numbers of neighbors. This makes it non-trivial to define the \"kernel\" for graph convolution.\n",
        "\n",
        "### Spectral filter on graphs\n",
        "Just like we can define a convolution on images in the frequency domain, we can also define a ''frequency domain'' for graphs.\n",
        "\n",
        "Consider a network of $N$ nodes, where each node has a feature variable ${\\mathbf x}_i \\in \\mathbb{R}$. We are interested in:\n",
        "\n",
        "$$\n",
        "J = \\frac{1}{2}\\sum_{i=1}^N\\sum_{j=1}^N A_{ij}(x_i - x_j)^2,\n",
        "$$\n",
        "\n",
        "where $A_{ij}$ is the adjacency matrix of the graph. The quantity $J$ represents *the total variation* of $x$ between connected nodes; a small $J$ means that connected nodes have similar $x$ (low variation; low frequency), while a large $J$ means that connected nodes have very different $x$ (high variation; high frequency).\n",
        "\n",
        "We can rewrite $J$ as\n",
        "\n",
        "$$\n",
        "J = \\frac{1}{2}\\sum_{i=1}^N\\sum_{j=1}^N A_{ij}(x_i - x_j)^2 = {\\bf x}^\\top {\\bf L} {\\bf x},\n",
        "$$\n",
        "\n",
        "where ${\\bf L}$ is the Laplacian matrix of the graph given by\n",
        "\n",
        "$$\n",
        "L_{ij} = \\begin{cases}\n",
        "-1 & \\text{if } i \\text{ and } j \\text{ are connected} \\\\\n",
        "k_i & \\text{if } i = j \\\\\n",
        "0 & \\text{otherwise}\n",
        "\\end{cases}.\n",
        "$$\n",
        "\n",
        "and ${\\bf x} = [x_1,x_2,\\ldots, x_N]^\\top$ is a column vector of feature variables.\n",
        "\n",
        "\n",
        "::: {.callout-note title=\"Detailed derivation\"}\n",
        ":tag: note\n",
        ":class: dropdown\n",
        "\n",
        "The above derivation shows that the total variation of $x$ between connected nodes is proportional to ${\\bf x}^\\top {\\bf L} {\\bf x}$.\n",
        "\n",
        "$$\n",
        "\\begin{aligned}\n",
        "J &= \\frac{1}{2}\\sum_{i=1}^N\\sum_{j=1}^N A_{ij}(x_i - x_j)^2 \\\\\n",
        "&= \\frac{1}{2}\\sum_{i=1}^N\\sum_{j=1}^N \\underbrace{A_{ij}\\left( x_i^2 +x_j^2\\right)}_{\\text{symmetric}} - \\sum_{i=1}^N\\sum_{j=1}^N A_{ij}x_ix_j \\\\\n",
        "&= \\sum_{i=1}^Nx_i^2\\underbrace{\\sum_{j=1}^N A_{ij}}_{\\text{degree of node } i, k_i} - \\sum_{i=1}^N\\sum_{j=1}^N A_{ij}x_ix_j \\\\\n",
        "&= \\sum_{i=1}^Nx_i^2 k_i - \\sum_{i=1}^N\\sum_{j=1}^N A_{ij}x_ix_j \\\\\n",
        "&= \\underbrace{[x_1,x_2,\\ldots, x_N]}_{{\\bf x}} \\underbrace{\\begin{bmatrix} k_1 & 0 & \\cdots & 0 \\\\ 0 & k_2 & \\cdots & 0 \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0 & 0 & \\cdots & k_N \\end{bmatrix}}_{{\\bf D}} \\underbrace{\\begin{bmatrix} x_1 \\\\ x_2 \\\\ \\vdots \\\\ x_N \\end{bmatrix}}_{{\\bf x}} - 2\\underbrace{\\sum_{i=1}^N\\sum_{j=1}^N A_{ij}}_{{\\bf x}^\\top {\\mathbf A} {\\bf x}} {\\bf x} \\\\\n",
        "&= {\\bf x}^\\top {\\bf D} {\\bf x} - {\\bf x}^\\top {\\mathbf A} {\\bf x} \\\\\n",
        "&= {\\bf x}^\\top {\\bf L} {\\bf x},\n",
        "\\end{aligned}\n",
        "$$\n",
        ":::\n",
        "\n",
        "Let us showcase the analogy between the Fourier transform and the Laplacian matrix.\n",
        "In the Fourier transform, a signal is decomposed into sinusoidal basis functions. Similarly, for a graph, we can decompose the variation $J$ into eigenvector bases.\n",
        "\n",
        "$$\n",
        "J = \\sum_{i=1}^N \\lambda_i  {\\bf x}^\\top {\\mathbf u}_i {\\mathbf u}_i^\\top {\\bf x} = \\sum_{i=1}^N \\lambda_i  ||{\\bf x}^\\top {\\mathbf u}_i||^2.\n",
        "$$\n",
        "\n",
        "where ${\\mathbf u}_i$ is the eigenvector corresponding to the eigenvalue $\\lambda_i$.\n",
        "- The term $({\\bf x}^\\top {\\mathbf u}_i)$ is a dot-product between the feature vector ${\\bf x}$ and the eigenvector ${\\mathbf u}_i$, which measures how much ${\\bf x}$ *coheres* with eigenvector ${\\mathbf u}_i$, similar to how Fourier coefficients measure coherency with sinusoids.\n",
        "- Each $||{\\bf x}^\\top {\\mathbf u}_i||^2$ is the ''strength'' of ${\\bf x}$ with respect to the eigenvector ${\\mathbf u}_i$, and the total variation $J$ is a weighted sum of these strengths.\n",
        "\n",
        "Some eigenvectors correspond to low-frequency components, while others correspond to high-frequency components. For example, the total variation $J$ for an eigenvector ${\\mathbf u}_i$ is given by\n",
        "\n",
        "$$\n",
        "J = \\frac{1}{2} \\sum_{j}\\sum_{\\ell} A_{j\\ell}(u_{ij} - u_{i\\ell})^2 = {\\mathbf u}_i^\\top {\\mathbf L} {\\mathbf u}_i = \\lambda_i.\n",
        "$$\n",
        "\n",
        "This equation provides key insight into the meaning of eigenvalues:\n",
        "\n",
        "1. For an eigenvector ${\\mathbf u}_i$, its eigenvalue $\\lambda_i$ measures the total variation for ${\\mathbf u}_i$.\n",
        "2. Large eigenvalues mean large differences between neighbors (high frequency), while small eigenvalues mean small differences (low frequency).\n",
        "\n",
        "Thus, if ${\\bf x}$ aligns well with ${\\mathbf u}_i$ with a large $\\lambda_i$, then ${\\bf x}$ has a strong high-frequency component; if ${\\bf x}$ aligns well with ${\\mathbf u}_i$ with a small $\\lambda_i$, then ${\\bf x}$ has strong low-frequency component.\n",
        "\n",
        "### Spectral Filtering\n",
        "\n",
        "Eigenvalues $\\lambda_i$ can be thought of as a *filter* that controls which frequency components pass through. Instead of using the filter associated with the Laplacian matrix, we can design a filter $h(\\lambda_i)$ to control which frequency components pass through. This leads to the idea of *spectral filtering*. Two common filters are:\n",
        "\n",
        "1. **Low-pass Filter**:\n",
        "   $$h_{\\text{low}}(\\lambda) = \\frac{1}{1 + \\alpha\\lambda}$$\n",
        "   - Preserves low frequencies (small λ)\n",
        "   - Suppresses high frequencies (large λ)\n",
        "   - Results in smoother signals\n",
        "\n",
        "2. **High-pass Filter**:\n",
        "   $$h_{\\text{high}}(\\lambda) = \\frac{\\alpha\\lambda}{1 + \\alpha\\lambda}$$\n",
        "   - Preserves high frequencies\n",
        "   - Suppresses low frequencies\n",
        "   - Emphasizes differences between neighbors"
      ],
      "id": "0abf178b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        ":tags: [remove-input]\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "sns.set_context(\"talk\")\n",
        "\n",
        "alpha = 1\n",
        "lambdas = np.linspace(0, 10, 100)\n",
        "h_low = 1 / (1 + alpha * lambdas)\n",
        "h_high = (alpha * lambdas) / (1 + alpha * lambdas)\n",
        "\n",
        "fig, axes = plt.subplots(1, 2, figsize=(10, 5))\n",
        "sns.lineplot(x=lambdas, y=h_low, label=\"Low-pass filter\", ax=axes[0])\n",
        "axes[0].legend(frameon=False).remove()\n",
        "sns.lineplot(x=lambdas, y=h_high, label=\"High-pass filter\", ax=axes[1])\n",
        "axes[1].legend(frameon=False).remove()\n",
        "axes[0].set_title(\"Low-pass filter\")\n",
        "axes[1].set_title(\"High-pass filter\")\n",
        "fig.text(0.5, 0.01, \"Eigenvalue $\\lambda$\", ha=\"center\")\n",
        "axes[0].set_ylabel(\"Filter response $h(\\lambda)$\")\n",
        "sns.despine()\n",
        "plt.tight_layout()"
      ],
      "id": "7d4a1f8a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Example\n",
        "\n",
        "Let us showcase the idea of spectral filtering with a simple example with the karate club network."
      ],
      "id": "0a4a4f98"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        ":tags: [remove-input]\n",
        "import igraph as ig\n",
        "import numpy as np\n",
        "from scipy import sparse\n",
        "import matplotlib as mpl\n",
        "\n",
        "G = ig.Graph.Famous(\"Zachary\")\n",
        "A = G.get_adjacency_sparse()"
      ],
      "id": "b513abc9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "We will first compute the laplacian matrix and its eigendecomposition."
      ],
      "id": "0aa596cc"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Compute Laplacian matrix\n",
        "deg = np.array(A.sum(axis=1)).reshape(-1)\n",
        "D = sparse.diags(deg)\n",
        "L = D - A\n",
        "\n",
        "# Compute eigendecomposition\n",
        "evals, evecs = np.linalg.eigh(L.toarray())\n",
        "\n",
        "# Sort eigenvalues and eigenvectors\n",
        "order = np.argsort(evals)\n",
        "evals = evals[order]\n",
        "evecs = evecs[:, order]"
      ],
      "id": "b0302fbe",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Now, let's create a low-pass and high-pass filter."
      ],
      "id": "0d3748aa"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "alpha = 2\n",
        "L_low = evecs @ np.diag(1 / (1 + alpha * evals)) @ evecs.T\n",
        "L_high = evecs @ np.diag(alpha * evals / (1 + alpha * evals)) @ evecs.T\n",
        "\n",
        "print(\"Size of low-pass filter:\", L_low.shape)\n",
        "print(\"Size of high-pass filter:\", L_high.shape)"
      ],
      "id": "971110e7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Notice that the high-pass filter and low-pass filter are matrices of the same size as the adjacency matrix $A$, which defines a 'convolution' on the graph as follows:\n",
        "\n",
        "$$\n",
        "{\\bf x}' = {\\bf L}_{\\text{low}} {\\bf x} \\quad \\text{or} \\quad {\\bf x}' = {\\bf L}_{\\text{high}} {\\bf x}.\n",
        "$$\n",
        "\n",
        "where ${\\bf L}_{\\text{low}}$ and ${\\bf L}_{\\text{high}}$ are the low-pass and high-pass filters, respectively, and ${\\bf x}'$ is the convolved feature vector.\n",
        "\n",
        "Now, let's see how these filters work. Our first example is a random feature vector."
      ],
      "id": "a81878cb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Random feature vector\n",
        "x = np.random.randn(A.shape[0], 1)\n",
        "\n",
        "# Convolve with low-pass filter\n",
        "x_low = L_low @ x\n",
        "\n",
        "# Convolve with high-pass filter\n",
        "x_high = L_high @ x"
      ],
      "id": "88e1c9b3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Let us visualize the results."
      ],
      "id": "deb5ea69"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        ":tags: [hide-input]\n",
        "\n",
        "fig, axes = plt.subplots(1, 3, figsize=(15, 5))\n",
        "palette = sns.color_palette(\"viridis\", as_cmap=True)\n",
        "norm = mpl.colors.Normalize(vmin=-0.3, vmax=0.3)\n",
        "\n",
        "# Original\n",
        "values = x.reshape(-1)\n",
        "values /= np.linalg.norm(values)\n",
        "ig.plot(G, vertex_color=[palette(norm(x)) for x in values], bbox=(0, 0, 500, 500), vertex_size=20, target=axes[0])\n",
        "axes[0].set_title(\"Original\")\n",
        "\n",
        "# Low-pass filter applied\n",
        "values = L_low @ x\n",
        "values /= np.linalg.norm(values)\n",
        "values = values.reshape(-1)\n",
        "ig.plot(G, vertex_color=[palette(norm(x)) for x in values], bbox=(0, 0, 500, 500), vertex_size=20, target=axes[1])\n",
        "axes[1].set_title(\"Low-pass filter\")\n",
        "\n",
        "# High-pass filter applied\n",
        "values = L_high @ x\n",
        "values /= np.linalg.norm(values)\n",
        "values = values.reshape(-1)\n",
        "ig.plot(G, vertex_color=[palette(norm(x)) for x in values], bbox=(0, 0, 500, 500), vertex_size=20, target=axes[2])\n",
        "axes[2].set_title(\"High-pass filter\")\n",
        "fig.tight_layout()"
      ],
      "id": "01bb4e82",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "We observe that the low-pass filter results in smoother ${\\bf x}$ between connected nodes (i.e., neighboring nodes have similar ${\\bf x}$).\n",
        "The original ${\\bf x}$ and ${\\bf x}'_{\\text{low}}$ are very similar because random variables are high-frequency components. In contrast, when we apply the high-pass filter, ${\\bf x}'_{\\text{high}}$ is similar to ${\\bf x}$ because the high-frequency components are not filtered.\n",
        "\n",
        "Let's now use an eigenvector as our feature vector ${\\bf x}$."
      ],
      "id": "da9e51d1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        ":tags: [hide-input]\n",
        "eigen_centrality = np.array(G.eigenvector_centrality()).reshape(-1, 1)\n",
        "low_pass_eigen = L_low @ eigen_centrality\n",
        "high_pass_eigen = L_high @ eigen_centrality\n",
        "\n",
        "fig, axes = plt.subplots(1, 3, figsize=(15, 5))\n",
        "palette = sns.color_palette(\"viridis\", as_cmap=True)\n",
        "\n",
        "norm = mpl.colors.Normalize(vmin=-0, vmax=0.3)\n",
        "values = eigen_centrality.reshape(-1)# high_pass_random.reshape(-1)\n",
        "values /= np.linalg.norm(values)\n",
        "values = values.reshape(-1)\n",
        "ig.plot(G, vertex_color=[palette(norm(x)) for x in values], bbox=(0, 0, 500, 500), vertex_size=20, target=axes[0])\n",
        "axes[0].set_title(\"Original\")\n",
        "\n",
        "values = low_pass_eigen.reshape(-1)\n",
        "values /= np.linalg.norm(values)\n",
        "values = values.reshape(-1)\n",
        "ig.plot(G, vertex_color=[palette(norm(x)) for x in values], bbox=(0, 0, 500, 500), vertex_size=20, target=axes[1])\n",
        "axes[1].set_title(\"Low-pass filter\")\n",
        "\n",
        "values = high_pass_eigen.reshape(-1)\n",
        "values /= np.linalg.norm(values)\n",
        "ig.plot(G, vertex_color=[palette(norm(x)) for x in values], bbox=(0, 0, 500, 500), vertex_size=20, target=axes[2])\n",
        "axes[2].set_title(\"High-pass filter\")\n",
        "fig.tight_layout()"
      ],
      "id": "c4df92ad",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The high-pass filter increases the contrast of the eigenvector centrality, emphasizing the differences between nodes. On the other hand, the low-pass filter smooths out the eigenvector centrality.\n",
        "\n",
        "## Graph Convolutional Networks\n",
        "\n",
        "We have seen that spectral filters give us a principled way to think about \"convolution\" on irregular graph structures, and controlling the frequency components brings out different aspects of the data. We now go one step further: instead of designing filters by hand, we can learn them from data for specific tasks.\n",
        "\n",
        "\n",
        "### Spectral Graph Convolutional Networks\n",
        "\n",
        "A simplest form of learnable spectral filter is given by\n",
        "\n",
        "$$\n",
        "{\\bf L}_{\\text{learn}} = \\sum_{k=1}^K \\theta_k {\\mathbf u}_k {\\mathbf u}_k^\\top,\n",
        "$$\n",
        "\n",
        "where ${\\mathbf u}_k$ are the eigenvectors and $\\theta_k$ are the learnable parameters. The variable $K$ is the number of eigenvectors used (i.e., the rank of the filter). The weight $\\theta_k$ is learned to maximize the performance of the task at hand.\n",
        "\n",
        "Building on this idea, {footcite}`bruna2014spectral` added a nonlinearity to the filter and proposed a spectral convolutional neural network (GCN) by\n",
        "\n",
        "$$\n",
        "{\\bf x}^{(\\ell+1)} = h\\left( L_{\\text{learn}} {\\bf x}^{(\\ell)}\\right),\n",
        "$$\n",
        "\n",
        "where $h$ is an activation function, and ${\\bf x}^{(\\ell)}$ is the feature vector of the $\\ell$-th convolution. They further extend this idea to convolve on multidimensional feature vectors, ${\\bf X} \\in \\mathbb{R}^{N \\times f_{\\text{in}}}$ to produce new feature vectors of different dimensionality, ${\\bf X}' \\in \\mathbb{R}^{N \\times f_{\\text{out}}}$.\n",
        "\n",
        "$$\n",
        "\\begin{aligned}\n",
        "{\\bf X}^{(\\ell+1)}_i &= h\\left( \\sum_j L_{\\text{learn}}^{(i,j)} {\\bf X}^{(\\ell)}_j\\right),\\quad \\text{where} \\quad L^{(i,j)}_{\\text{learn}} = \\sum_{k=1}^K \\theta_{k, (i,j)} {\\mathbf u}_k {\\mathbf u}_k^\\top,\n",
        "\\end{aligned}\n",
        "$$\n",
        "\n",
        "Notice that the learnable filter $L_{\\text{learn}}^{(i,j)}$ is defined for each pair of input $i$ and output $j$ dimensions.\n",
        "\n",
        "\n",
        "```{note}\n",
        "Many GCNs simple when it comes to implementation despite the complicated formula. And this is one of my ways to learn GNNs. Check out the [Appendix for the Python implementation](appendix.md).\n",
        "\n",
        "```\n",
        "\n",
        "### From Spectral to Spatial\n",
        "\n",
        "Spectral GCNs are mathematically elegant but have two main limitations:\n",
        "1. **Computational Limitation**: Computing the spectra of the Laplacian is expensive ${\\cal O}(N^3)$ and prohibitive for large graphs\n",
        "2. **Spatial Locality**: The learned filters are not spatially localized. A node can be influenced by all other nodes in the graph.\n",
        "\n",
        "These two limitations motivate the development of spatial GCNs.\n",
        "\n",
        "### ChebNet\n",
        "\n",
        "ChebNet {footcite}`defferrard2016convolutional` is one of the earliest spatial GCNs that bridges the gap between spectral and spatial domains.\n",
        "The key idea is to leverage Chebyshev polynomials to approximate ${\\bf L}_{\\text{learn}}$ by\n",
        "\n",
        "$$\n",
        "{\\bf L}_{\\text{learn}} \\approx \\sum_{k=0}^{K-1} \\theta_k T_k(\\tilde{{\\bf L}}), \\quad \\text{where} \\quad \\tilde{{\\bf L}} = \\frac{2}{\\lambda_{\\text{max}}}{\\bf L} - {\\bf I},\n",
        "$$\n",
        "\n",
        "where $\\tilde{{\\bf L}}$ is the scaled and normalized Laplacian matrix in order to have eigenvalues in the range of $[-1,1]$. The Chebyshev polynomials $T_k(\\tilde{{\\bf L}})$ transforms the eigenvalues $\\tilde{{\\bf L}}$ to the following recursively:\n",
        "\n",
        "$$\n",
        "\\begin{aligned}\n",
        "T_0(\\tilde{{\\bf L}}) &= {\\bf I} \\\\\n",
        "T_1(\\tilde{{\\bf L}}) &= \\tilde{{\\bf L}} \\\\\n",
        "T_k(\\tilde{{\\bf L}}) &= 2\\tilde{{\\bf L}} T_{k-1}(\\tilde{{\\bf L}}) - T_{k-2}(\\tilde{{\\bf L}})\n",
        "\\end{aligned}\n",
        "$$\n",
        "\n",
        "We then replace ${\\bf L}_{\\text{learn}}$ in the original spectral GCN with the Chebyshev polynomial approximation:\n",
        "\n",
        "$$\n",
        "{\\bf x}^{(\\ell+1)} = h\\left( \\sum_{k=0}^{K-1} \\theta_k T_k(\\tilde{{\\bf L}}){\\bf x}^{(\\ell)}\\right),\n",
        "$$\n",
        "\n",
        "where:\n",
        "- $T_k(\\tilde{{\\bf L}})$ applies the k-th Chebyshev polynomial to the scaled Laplacian matrix\n",
        "- $\\theta_k$ are the learnable parameters\n",
        "- K is the order of the polynomial (typically small, e.g., K=3)\n",
        "\n",
        "### Graph Convolutional Networks by Kipf and Welling\n",
        "\n",
        "While ChebNet offers a principled way to approximate spectral convolutions, Kipf and Welling (2017) {footcite}`kipf2017semi` proposed an even simpler and highly effective variant called **Graph Convolutional Networks (GCN)**.\n",
        "\n",
        "\n",
        "##### First-order Approximation\n",
        "\n",
        "The key departure is to use the first-order approximation of the Chebyshev polynomials.\n",
        "\n",
        "$$\n",
        "g_{\\theta'} * x \\approx \\theta'_0x + \\theta'_1(L - I_N)x = \\theta'_0x - \\theta'_1D^{-\\frac{1}{2}}AD^{-\\frac{1}{2}}x\n",
        "$$\n",
        "\n",
        "This is crude approximation but it leads to a much simpler form, leaving only two learnable parameters, instead of $K$ parameters in the original ChebNet.\n",
        "\n",
        "Additionally, they further simplify the formula by using the same $\\theta$ for both remaining parameters (i.e., $\\theta_0 = \\theta$ and $\\theta_1 = -\\theta$). The result is the following convolutional filter:\n",
        "\n",
        "$$\n",
        "g_{\\theta} * x \\approx \\theta(I_N + D^{-\\frac{1}{2}}AD^{-\\frac{1}{2}})x\n",
        "$$\n",
        "\n",
        "While this is a very simple filter, one can stack multiple layers of convolutions to perform high-order graph convolutions.\n",
        "\n",
        "##### Deep GCNs can suffer from over-smoothing\n",
        "\n",
        "GCN models can be deep, and when they are too deep, they start suffering from an ill-posed problem called *gradient vanishing/exploding*, where the gradients of the loss function becomes too small or too large to update the model parameters. It is a common problem in deep learning.\n",
        "\n",
        "To facilitate the training of deep GCNs, the authors introduce a very simple trick called *renormalization*. The idea is to add self-connections to the graph:\n",
        "\n",
        "$$\n",
        "\\tilde{A} = A + I_N, \\quad \\text{and} \\quad \\tilde{D}_{ii} = \\sum_j \\tilde{A}_{ij}\n",
        "$$\n",
        "\n",
        "And use $\\tilde{A}$ and $\\tilde{D}$ to form the convolutional filter.\n",
        "\n",
        "Altogether, this leads to the following layer-wise propagation rule:\n",
        "\n",
        "$$X^{(\\ell+1)} = \\sigma(\\tilde{D}^{-\\frac{1}{2}}\\tilde{A}\\tilde{D}^{-\\frac{1}{2}}X^{(\\ell)}W^{(\\ell)})$$\n",
        "\n",
        "where:\n",
        "- $X^{(\\ell)}$ is the matrix of node features at layer $\\ell$\n",
        "- $W^{(\\ell)}$ is the layer's trainable weight matrix\n",
        "- $\\sigma$ is a nonlinear activation function (e.g., ReLU)\n",
        "\n",
        "These simplifications offer several advantages:\n",
        "- **Efficiency**: Linear complexity in number of edges\n",
        "- **Localization**: Each layer only aggregates information from immediate neighbors\n",
        "- **Depth**: Fewer parameters allow building deeper models\n",
        "- **Performance**: Despite (or perhaps due to) its simplicity, it often outperforms more complex models\n",
        "\n",
        "::: {.callout-note title=\"Exercise\"}\n",
        ":class: note\n",
        "\n",
        "Let's implement a simple GCN model for node classification.\n",
        "[Coding Exercise](../../../notebooks/exercise-m09-graph-neural-net.ipynb)\n",
        ":::\n",
        "\n",
        "## Popular Graph Neural Networks\n",
        "\n",
        "In this section, we will introduce three popular GNNs: GraphSAGE, Graph Attention Networks (GAT), and Graph Isomorphism Network (GIN).\n",
        "\n",
        "### GraphSAGE: Sample and Aggregate\n",
        "\n",
        "GraphSAGE {footcite}`hamilton2017graphsage` introduced a different GCN that can be ***generalized to unseen nodes*** (they called it \"inductive\"). While previous approaches like ChebNet and GCN operate on the entire graph, GraphSAGE proposes an inductive framework that generates embeddings by sampling and aggregating features from a node's neighborhood.\n",
        "\n",
        "![](https://theaisummer.com/static/02e23adc75fe68e5dd249a94f3c1e8cc/c483d/graphsage.png)\n",
        "\n",
        "### Key Ideas\n",
        "\n",
        "GraphSAGE involves two key ideas: (1) sampling and (2) aggregation.\n",
        "\n",
        "##### Neighborhood Sampling\n",
        "\n",
        "The key idea is the *neighborhood sampling*. Instead of using all neighbors, GraphSAGE samples a fixed-size set of neighbors for each node. This controls memory complexity, a key limitation of the previous GNNs.\n",
        "\n",
        "Another key advantage of neighborhood sampling is that it enables GraphSAGE to handle dynamic, growing networks. Consider a citation network where new papers (nodes) are continuously added. Traditional GCNs would need to recompute filters for the entire network with each new addition. In contrast, GraphSAGE can immediately generate embeddings for new nodes by simply sampling their neighbors, without any retraining or recomputation.\n",
        "\n",
        "##### Aggregation\n",
        "\n",
        "Another key idea is the *aggregation*. GraphSAGE makes a distinction between self-information and neighborhood information. While previous GNNs treat them equally and aggregate them, GraphSAGE treats them differently. Specifically, GraphSAGE introduces an additional step: it concatenates the self-information and the neighborhood information as the input of the convolution.\n",
        "\n",
        "$$\n",
        "Z_v = \\text{CONCAT}(X_v, X_{\\mathcal{N}(v)})\n",
        "$$\n",
        "\n",
        "where $X_v$ is the feature of the node itself and $X_{\\mathcal{N}(v)}$ is the aggregation of the features of its neighbors. GraphSAGE introduces different ways to aggregate information from neighbors:\n",
        "\n",
        "   $$X_{\\mathcal{N}(v)} = \\text{AGGREGATE}_k(\\{X_u, \\forall u \\in \\mathcal{N}(v)\\})$$\n",
        "\n",
        "   Common aggregation functions include:\n",
        "   - Mean aggregator: $\\text{AGGREGATE} = \\text{mean}(\\{h_u, \\forall u \\in \\mathcal{N}(v)\\})$\n",
        "   - Max-pooling: $\\text{AGGREGATE} = \\max(\\{\\sigma(W_{\\text{pool}}h_u + b), \\forall u \\in \\mathcal{N}(v)\\})$\n",
        "   - LSTM aggregator: Apply LSTM to randomly permuted neighbors\n",
        "\n",
        "The concatenated feature $Z_v$ is normalized by the L2 norm.\n",
        "\n",
        "$$\n",
        "\\hat{Z}_v = \\frac{Z_v}{\\|Z_v\\|_2}\n",
        "$$\n",
        "\n",
        "and then fed into the convolution.\n",
        "\n",
        "$$\n",
        "X_v^k = \\sigma(W^k \\hat{Z}_v + b^k)\n",
        "$$\n",
        "\n",
        "### Graph Attention Networks (GAT): Differentiate Individual Neighbors\n",
        "\n",
        "A key innovation of GraphSAGE is to treat the self and neighborhood information differently. But should all neighbors be treated equally? Graph Attention Networks (GAT) address this by letting the model learn which neighbors to pay attention to.\n",
        "\n",
        "\n",
        "\n",
        "### Attention Mechanism\n",
        "\n",
        "![](https://production-media.paperswithcode.com/methods/Screen_Shot_2020-07-08_at_7.55.32_PM_vkdDcDx.png)\n",
        "\n",
        "The core idea is beautifully simple: instead of using fixed weights like GCN, let's learn attention weights $\\alpha_{ij}$ that determine how much node $i$ should attend to node $j$. These weights are computed dynamically based on node features:\n",
        "\n",
        "$$\n",
        "\\alpha_{ij} = \\frac{\\exp(e_{ij})}{\\sum_{k \\in \\mathcal{N}(i)} \\exp(e_{ik})}\n",
        "$$\n",
        "\n",
        "where $e_{ij}$ represents the importance of the edge between node $i$ and node $j$. Variable $e_{ij}$ is a *learnable* parameter and can be negative, and the exponential function is applied to transform it to a non-negative value, with the normalization term $\\sum_{k \\in \\mathcal{N}(i)} \\exp(e_{ik})$ to ensure the weights sum to 1.\n",
        "\n",
        "How to compute $e_{ij}$? One simple choice is to use a neural network with a shared weight matrix $W$ and a LeakyReLU activation function. Specifically:\n",
        "\n",
        "1. Let's focus on computing $e_{ij}$ for node $i$ and its neighbor $j$.\n",
        "2. We use a shared weight matrix $W$ to transform the features of node $i$ and $j$.\n",
        "   $$\n",
        "   \\mathbf{\\tilde h}_i  = \\mathbf{h}_i, \\quad \\mathbf{\\tilde h}_j  = W\\mathbf{h}_j\n",
        "   $$\n",
        "3. We concatenate the transformed features and apply a LeakyReLU activation function.\n",
        "\n",
        "$$\n",
        "e_{ij} = \\text{LeakyReLU}(\\mathbf{a}^T[\\mathbf{\\tilde h}_i, \\mathbf{\\tilde h}_j])\n",
        "$$\n",
        "\n",
        "where $\\mathbf{a}$ is a trainable parameter vector that sums the two transformed features.\n",
        "\n",
        "Once we have these attention weights, the node update is straightforward - just a weighted sum of neighbor features:\n",
        "\n",
        "$$\\mathbf{h}'_i = \\sigma\\left(\\sum_{j \\in \\mathcal{N}(i) \\cup \\{i\\}} \\alpha_{ij}{\\bf W}_{\\text{feature}}\\mathbf{h}_j\\right)$$\n",
        "\n",
        "where ${\\bf W}_{\\text{feature}}$ is a trainable weight matrix. To stabilize training, GAT uses multiple attention heads and concatenates their outputs:\n",
        "\n",
        "$$\\mathbf{h}'_i = \\parallel_{k=1}^K \\sigma\\left(\\sum_{j \\in \\mathcal{N}(i) \\cup \\{i\\}} \\alpha_{ij}^k{\\bf W}^k_{\\text{feature}}\\mathbf{h}_j\\right)$$\n",
        "\n",
        "### Graph Isomorphism Network (GIN): Differentiate the Aggregation\n",
        "\n",
        "Graph Isomorphism Networks (GIN) is another popular GNN that born out of a question: what is the maximum discriminative power achievable by Graph Neural Networks? The answer lies in its theoretical connection to **the Weisfeiler-Lehman (WL) test**, a powerful algorithm for graph isomorphism testing.\n",
        "\n",
        "\n",
        "### Weisfeiler-Lehman Test\n",
        "\n",
        "Are two graphs structurally identical? Graph isomorphism testing determines if two graphs are structurally identical, with applications in graph classification, clustering, and other tasks.\n",
        "\n",
        "![](https://i.sstatic.net/j5sGu.png)\n",
        "\n",
        "While the general problem has no known polynomial-time solution, the WL test is an efficient heuristic that works well in practice. The WL test iteratively refines node labels by hashing the multiset of neighboring labels\n",
        "\n",
        "\n",
        "![](../figs/weisfeiler-lehman-test.jpg)\n",
        "\n",
        "The WL test works as follows:\n",
        "\n",
        "1. Assign all nodes the same initial label.\n",
        "2. For each node, collect the labels of all its neighbors and *aggregate them* into a hash (e.g., new label). For example, the top node gets {0} from its neighbors, resulting in a collection {0,0}. A new label is created via a hash function $h$ that maps {0, {0, 0}} to a new label 1.\n",
        "3. Repeat the process for a fixed number of iterations or until convergence.\n",
        "\n",
        "Here is the implementation of the WL test in Python:"
      ],
      "id": "39ad9718"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        ":tags: [hide-input]\n",
        "\n",
        "import numpy as np\n",
        "from scipy import sparse\n",
        "\n",
        "def weisfeiler_lehman_test(A, num_iterations):\n",
        "    n_nodes = A.shape[0]\n",
        "    labels = np.zeros(n_nodes, dtype=int)\n",
        "    color_map = {}\n",
        "    hash_fn = lambda x: color_map.setdefault(x, len(color_map))\n",
        "    for _ in range(num_iterations):\n",
        "\n",
        "        # Go through each node\n",
        "        labels_old = labels.copy()\n",
        "        for i in range(n_nodes):\n",
        "\n",
        "            # Collect the labels of all neighbors\n",
        "            neighbors = A[i].nonzero()[1]\n",
        "            neighbor_labels = labels_old[neighbors]\n",
        "\n",
        "            # Count the frequency of each label\n",
        "            unique, counts = np.unique(neighbor_labels, return_counts=True)\n",
        "\n",
        "            # Create a hash key by converting the frequency dictionary to a string\n",
        "            hash_key = str({unique[j]: counts[j] for j in range(len(unique))})\n",
        "\n",
        "            # Create a new label by hashing the frequency dictionary\n",
        "            label = hash_fn(hash_key)\n",
        "            labels[i] = label\n",
        "\n",
        "        # Check convergence\n",
        "        unique, counts = np.unique(labels, return_counts=True)\n",
        "        unique_old, counts_old = np.unique(labels_old, return_counts=True)\n",
        "        if np.array_equal(np.sort(counts), np.sort(counts_old)):\n",
        "            break\n",
        "    return labels\n",
        "\n",
        "\n",
        "edge_list = [(0, 1), (1, 2), (2, 0), (3, 4), (4, 5), (5, 3)]\n",
        "\n",
        "A = sparse.csr_matrix(\n",
        "    ([1] * len(edge_list), ([e[0] for e in edge_list], [e[1] for e in edge_list])),\n",
        "    shape=(6, 6),\n",
        ")\n",
        "A = A + A.T\n",
        "A.sort_indices()\n",
        "\n",
        "weisfeiler_lehman_test(A, A.shape[0])"
      ],
      "id": "8247a3e0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "After these iterations:\n",
        "- Nodes with the same label are structurally identical, meaning that they are indistinguishable unless we label them differently.\n",
        "- Two graphs are structurally identical if and only if they have the same node labels after the WL test.\n",
        "\n",
        "The WL test is a heuristic and can fail on some graphs. For example, it cannot distinguish regular graphs with the same number of nodes and edges.\n",
        "\n",
        "```{note}\n",
        "The WL test above is called the 1-WL test. There are higher-order WL tests that can distinguish more graphs, which are the basis of advanced GNNs.\n",
        "Check out [this note](https://www.moldesk.net/blog/weisfeiler-lehman-isomorphism-test/)\n",
        "```\n",
        "\n",
        "### GIN\n",
        "\n",
        "GIN {footcite}`xu2018how` is a GNN that is based on the WL test.\n",
        "The key idea is to focus on the parallel between the WL test and the GNN update rule.\n",
        "- In the WL test, we iteratively collect the labels of neighbors and aggregate them through a *hash function*.\n",
        "- In the GraphSAGE and GAT, the labels are the nodes' features, and the aggregation is some arithmetic operations such as mean or max.\n",
        "\n",
        "The key difference is that the hash function in the WL test always distinguishes different sets of neighbors' labels, while the aggregation in GraphSAGE and GAT does not always do so. For example, if all nodes have the same feature (e.g., all 1), the aggregation by the mean or max will result in the same value for all nodes, whereas the hash function in the WL test can still distinguish different sets of neighbors' labels by *the count of each label*.\n",
        "\n",
        "The resulting convolution update rule is:\n",
        "\n",
        "$$\n",
        "h_v^{(k+1)} = \\text{MLP}^{(k)}\\left((1 + \\epsilon^{(k)}) \\cdot h_v^{(k)} + \\sum_{u \\in \\mathcal{N}(v)} h_u^{(k)}\\right)\n",
        "$$\n",
        "\n",
        "where $\\text{MLP}^{(k)}$ is a multi-layer perceptron (MLP) with $k$ layers, and $\\epsilon^{(k)}$ is a fixed or trainable parameter.\n",
        "\n",
        "\n",
        "\n",
        "```{footbibliography}\n",
        "\n",
        "```"
      ],
      "id": "d1141aa8"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "netdatasci",
      "language": "python",
      "display_name": "netdatasci",
      "path": "/Users/skojaku-admin/Library/Jupyter/kernels/netdatasci"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}