---
title: Euler Tour Concepts - The Birth of Network Science
---


## What to learn in this module

In this module, we will explore the historical moment that gave birth to graph theory and modern network science. A simple Sunday stroll puzzle in an 18th-century Prussian city would spark a mathematical revolution that now powers everything from GPS navigation to social media algorithms.

Through Euler's elegant solution, we will learn:

- How to describe a network using mathematical language
- How mathematical abstraction reveals hidden structure in complex problems
- The power of degree-based reasoning in network analysis
- Keywords: **network**, **graph**, **degree**, **Euler walk**, **mathematical abstraction**

::: {.column-margin}
This is not just history‚ÄîEuler's approach of abstracting complex systems into nodes and edges is the same method we use today to analyze internet routing, brain connectivity, and viral spread patterns.
:::

## A Sunday Stroll That Changed Mathematics

Back in the 18th century, there was a city called *K√∂nigsberg* situated on the Pregel River in what was then Prussia (now Kaliningrad, Russia). The city was built around two large islands, beautifully connected to each other and the mainland by seven elegant bridges.

::: {.column-margin}
K√∂nigsberg was a major intellectual center of the Enlightenment. [Immanuel Kant](https://en.wikipedia.org/wiki/Immanuel_Kant) spent his entire life there, never traveling more than 10 miles from the city. The university attracted scholars from across Europe.
:::

During their leisurely Sunday walks, the citizens of K√∂nigsberg found themselves pondering an intriguing puzzle:


::: {.callout-note title="The K√∂nigsberg Bridge Problem"}
Is it possible to take a walk through the city that crosses each bridge exactly once and returns to the starting point?
:::


![alt text](https://99percentinvisible.org/wp-content/uploads/2022/02/bridges-with-water-600x418.png){#fig-seven-bridges fig-alt="The seven bridges of K√∂nigsberg"}

: The seven bridges of K√∂nigsberg {#fig-seven-bridges}

This seemingly innocent recreational question would become one of the most important problems in the history of mathematics. What made it revolutionary wasn't the answer, but ***how*** the answer was found.

## Try It Yourself First!

Before we reveal Euler's brilliant solution, **take some time to think about this problem yourself**. This is exactly how mathematical discovery works‚Äîby wrestling with puzzles and developing your own insights.

::: {.callout-tip title="Work Through It Step by Step"}
**Highly recommended**: Download and work through this excellent [pen-and-paper worksheet](http://estebanmoro.org/pdf/netsci_for_kids/the_konisberg_bridges.pdf) created by Esteban Moro [@esteban-moro-worksheet]. It guides you through Euler's reasoning step by step, letting you discover the solution yourself.

**Questions to consider while working:**

- Can you trace a path that crosses each bridge exactly once?
- What patterns do you notice when you try different routes?
- What properties of the landmasses seem important?
- How might you prove that something is impossible, rather than just failing to find it?
:::

The beauty of mathematics lies not just in the answers, but in the process of discovery.

::: {.callout-warning}
## ‚ö†Ô∏è Pause Here First!

**Before reading Euler's solution below**, we strongly encourage you to:

1. **Work through the [pen-and-paper worksheet](http://estebanmoro.org/pdf/netsci_for_kids/the_konisberg_bridges.pdf)** by Esteban Moro
2. **Try the puzzle yourself** - can you find a path that crosses each bridge exactly once?
3. **Think about what makes this problem difficult** - what constraints do you notice?

The learning experience is much richer when you discover the insights yourself first!
:::

Once you've given it some thought, continue reading to see how Euler approached this problem in 1736.

---

## üîç Euler's Revolutionary Abstraction

[Leonhard Euler](https://en.wikipedia.org/wiki/Leonhard_Euler) approached this puzzle in 1736 with a stroke of genius that would define mathematical thinking for centuries. Instead of getting bogged down in the physical details‚Äîthe width of the bridges, the size of the islands, the beauty of the architecture‚Äîhe made a ***radical simplification***.

::: {.column-margin}
Leonhard Euler (1707-1783) was one of the most prolific mathematicians in history, contributing to nearly every area of mathematics. He lost sight in his right eye in 1738 but continued his work, producing almost half of his total output after becoming completely blind in 1766.

![](https://upload.wikimedia.org/wikipedia/commons/thumb/d/d7/Leonhard_Euler.jpg/200px-Leonhard_Euler.jpg)
:::

This was revolutionary thinking for its time. Before Euler, mathematics focused on quantities, measurements, and calculations. Euler showed that sometimes the *relationships* between objects matter more than the objects themselves.

Euler realized that for this problem, only one thing mattered: ***which landmasses connect to which other landmasses***. Everything else‚Äîthe bridge lengths, island shapes, water depths‚Äîwas irrelevant distraction.

He simplified the city into *a network of landmasses connected by bridges*:

::: {#fig-euler-graph}

![](https://towardsdatascience.com/wp-content/uploads/2024/05/15n0gkvpktkGYtAase5oYuw-1.png)

Euler's graph of the bridges of Knigsberg. Taken from  [The Essential Guide to Graph Theory: From an 18th Century Riddle to AI Frameworks](https://towardsdatascience.com/the-essential-guide-to-graph-theory-from-an-18th-century-riddle-to-artificial-intelligence-c441cb9400de/)

:::

This abstraction‚Äîreducing a complex physical system to its essential connectivity‚Äîwas the birth of ***graph theory***. Euler had invented a new mathematical language for describing relationships.

Once Euler had his abstract graph, he made another crucial insight. Instead of trying different walking routes (which would take forever), he focused on a fundamental property: ***how many bridges connect to each landmass?***

::: {.column-margin}
This shift from "trying all possibilities" to "analyzing constraints" is a hallmark of mathematical thinking. Instead of brute force, Euler used logical reasoning to prove impossibility.
:::

Euler considered the degree (number of connections) of each node and realized there were only two cases:
- a node has an **even number** of edges, or
- a node has an **odd number** of edges.

When a node has an even number $2k$ of edges, you can enter and leave the node exactly $k$ times by crossing different edges. Every time you enter through one bridge, you can leave through another. The bridges naturally pair up.

When a node has an odd number $2k+1$ of edges, you can enter and leave the node $k$ times, but one edge is left over. The only way to cross this last edge is if your journey ***starts or ends*** at this node.

::: {.column-margin}
Think of it like a dance where everyone needs a partner. In nodes with even degree, every bridge has a "partner" for entering and leaving. Odd-degree nodes always have one "wallflower" bridge that can only be used at the very beginning or end.
:::

Based on this elegant reasoning, Euler arrived at his famous theorem:

::: {.callout-note title="Euler's Path Theorem"}
A walk that crosses all edges exactly once exists **if and only if**:

- All nodes have even degree, **OR**
- Exactly two nodes have odd degree

:::

This wasn't just a solution‚Äîit was a **proof**. Euler had shown not just whether such a path exists, but exactly when it's possible.


::: {.column-margin}
A good Youtube video explaining the Euler's story:

<iframe width="250" height="150" src="https://www.youtube.com/embed/nZwSo4vfw6c?si=DVOe6vis6iIUuqrv" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
:::


## ‚öñÔ∏è The Verdict: K√∂nigsberg's Impossible Dream

Applying Euler's theorem to the original K√∂nigsberg bridges reveals the truth: **every landmass has an odd number of bridges**. According to Euler's conditions, this makes the desired walk impossible.

::: {.column-margin}
In the original graph: North shore (3 bridges), South shore (3 bridges), Large island (5 bridges), Small island (3 bridges). Four nodes with odd degree‚Äîexactly two more than Euler's theorem allows.
:::

The citizens of K√∂nigsberg had been attempting the impossible. Their Sunday stroll puzzle had no solution, and Euler had proven it with mathematical certainty.

The story takes a sobering turn during World War II. In 1944, K√∂nigsberg was heavily bombed by Allied forces, and later captured by the Soviet Union. Two of the seven historic bridges were destroyed in the bombardment.

![](../figs/seven-bridge-bombared.png){#fig-markdown-fig fig-alt="Two bridges were bombed by Soviet Union, which allows the Euler path to exist."}

: After WWII bombing, only five bridges remained‚Äîfinally making an Euler path possible. {#fig-markdown-fig}

::: {.column-margin}
The city was renamed Kaliningrad and became part of Russia. Today, it remains a Russian exclave, separated from the rest of Russia by Lithuania and Poland. The few remaining bridges span a river now in a very different political landscape.
:::

With only five bridges remaining, the network finally satisfied Euler's conditions: exactly two nodes had odd degree. The mathematical puzzle that had stumped citizens for two centuries was "solved" by the tragic circumstances of war.

This ironic resolution reminds us that while mathematics reveals timeless truths about structure and possibility, the physical world‚Äîand human history‚Äîfollows much more complex and unpredictable patterns.

## The Lasting Legacy

Euler's solution to the K√∂nigsberg bridge problem did far more than solve a recreational puzzle. It demonstrated that:

- **Abstract thinking** can solve concrete problems
- **Mathematical proof** is more powerful than trial and error
- **Network structure** determines what's possible in interconnected systems

These insights now underpin our understanding of everything from internet routing protocols to epidemic spreading models. Every time you use GPS navigation or analyze social network data, you're applying principles that trace back to Euler's Sunday stroll through K√∂nigsberg.

### Fun trivia:

**[Leonhard Euler](https://en.wikipedia.org/wiki/Leonhard_Euler)** (1707-1783): Swiss mathematician and physicist, widely regarded as one of the most prolific mathematicians in history. Beyond solving the K√∂nigsberg bridge problem, he made fundamental contributions to calculus, topology, number theory, and physics. Despite losing sight in one eye and later becoming completely blind, he continued his mathematical work and produced nearly half of his total output after losing his sight.

**[Immanuel Kant](https://en.wikipedia.org/wiki/Immanuel_Kant)** (1724-1804): German philosopher and one of the central thinkers of the Enlightenment. Born and died in K√∂nigsberg, never traveling more than 10 miles from the city. His systematic works in epistemology, metaphysics, ethics, and aesthetics have made him one of the most influential figures in modern Western philosophy. His regular daily walks were so punctual that neighbors reportedly set their clocks by his daily walks.

## References

::: {#refs}
:::---
title: Coding Networks in Python
jupyter: python3
execute:
    enabled: true
---

Now that you understand the conceptual foundation from Euler's work, let's explore how to represent and analyze networks computationally. Given a network of any size, our goal is to create a function that can tell us whether the network has an Euler path or not.

```python
def has_euler_path(A):
    """
    Check if a graph has an Euler path based on node degrees.
    Complete this function based on Euler's theorem.

    A: network
    return: True if the network has an Euler path, False otherwise
    """
    pass
```

We'll work through both general network representations and apply them specifically to the K√∂nigsberg bridge problem.

## Network Representations: From Pictures to Data Structures

Consider this network with 5 nodes and 6 edges:

::: {#fig-small-graph}

![](https://www.tandfonline.com/cms/asset/2820b951-1747-4621-802c-8d04263f106c/tcon_a_1707286_f0001_oc.jpg){width=200px}

A small graph of five nodes and six edges.

:::

How do we represent this graph in a format that a computer can understand and manipulate? Just as Euler needed to abstract K√∂nigsberg's bridges, we need data structures that capture the network's essential connectivity while enabling efficient analysis.

::: {.column-margin}
The choice of representation can dramatically affect computational efficiency. For sparse networks (few edges), adjacency lists are memory-efficient. For dense networks or matrix operations, adjacency matrices are preferred.
:::

Let's explore three fundamental approaches that form the backbone of all network algorithms.

### Edge Table: The Direct Approach

The edge table directly lists connections as pairs‚Äîthe most intuitive way to store network data.

::: {.column-margin}
Edge tables are also called "edge lists" and are the most common format for storing large-scale network data in files. Social media platforms like Twitter and Facebook store billions of connections this way.
:::

```{python}
# Each row represents one edge (connection between two nodes)
edges = [
    (0, 1),  # Node 0 connects to Node 1
    (0, 2),  # Node 0 connects to Node 2
    (1, 2),  # Node 1 connects to Node 2
    (1, 3),  # Node 1 connects to Node 3
    (2, 4),  # Node 2 connects to Node 4
    (3, 4)   # Node 3 connects to Node 4
]

print(f"Network has {len(edges)} edges")
print("Edge list:", edges)
```

This mirrors how we'd naturally describe the network: "Node 0 connects to nodes 1 and 2, node 1 connects to nodes 0, 2, and 3..." It's the digital equivalent of Euler's original approach‚Äîsimply listing which bridges connect which landmasses.

### Adjacency List: The Neighborhood Map

The adjacency list stores each node's neighbors in a dictionary‚Äîlike a social network where each person has a list of friends.

::: {.column-margin}
Most graph algorithms prefer adjacency lists because they allow fast iteration over a node's neighbors. This is crucial for algorithms like breadth-first search or computing clustering coefficients.
:::

```{python}
# Define adjacency list directly as a dictionary
neighbors = {
    0: [1, 2],     # Node 0 connects to nodes 1 and 2
    1: [0, 2, 3],  # Node 1 connects to nodes 0, 2, and 3
    2: [0, 1, 4],  # Node 2 connects to nodes 0, 1, and 4
    3: [1, 4],     # Node 3 connects to nodes 1 and 4
    4: [2, 3]      # Node 4 connects to nodes 2 and 3
}

print("Adjacency list representation:")
for node, neighbor_list in neighbors.items():
    print(f"Node {node}: {neighbor_list}")
```

### Adjacency Matrix: The Mathematical Grid

The adjacency matrix uses a grid where entry (i,j) = 1 if nodes are connected‚Äîthe mathematician's favorite representation.

::: {.column-margin}
Adjacency matrices enable powerful mathematical operations. Matrix multiplication reveals paths of different lengths, and eigenvalue analysis can uncover community structure. Google's PageRank algorithm fundamentally relies on matrix operations.
:::

```{python}
# Define adjacency matrix directly
import numpy as np

matrix = np.array([
    [0, 1, 1, 0, 0],  # Node 0 connects to nodes 1, 2
    [1, 0, 1, 1, 0],  # Node 1 connects to nodes 0, 2, 3
    [1, 1, 0, 0, 1],  # Node 2 connects to nodes 0, 1, 4
    [0, 1, 0, 0, 1],  # Node 3 connects to nodes 1, 4
    [0, 0, 1, 1, 0]   # Node 4 connects to nodes 2, 3
])

print("Adjacency matrix:")
print(matrix)
```

Notice the symmetry: if node i connects to node j, then node j connects to node i (for undirected networks). This symmetry disappears in directed networks, where relationships can be one-way.

## Counting Node Degrees: Euler's Key Insight

The degree of a node is the number of edges connected to it. This simple concept was central to Euler's proof‚Äîhe realized that a valid bridge walk requires each landmass to have an even degree (except possibly the starting and ending points).

::: {.column-margin}
In K√∂nigsberg, all four landmasses had odd degree, making the bridge walk impossible. This insight‚Äîthat global properties emerge from local structure‚Äîremains fundamental to network analysis today.
:::

Here's how to compute degrees using each representation:

### From Edge Table: Counting Appearances

Count how many times each node appears in the edge list.

```{python}
_degrees = [0] * 5
for node1, node2 in edges:
    _degrees[node1] += 1
    _degrees[node2] += 1
print("Degrees from edge list:", _degrees)
```

::: {.column-margin}
We increment the degree counter for both nodes in each edge because every edge contributes to two nodes' degrees. This is why the total degree always equals twice the number of edges.
:::

### From Adjacency List: Counting Friends

Count the length of each node's neighbor list‚Äîthe most direct approach.

```{python}
_degrees = [len(neighbors[i]) for i in range(5)]
print("Degrees from adjacency list:", _degrees)
```

### From Adjacency Matrix: Linear Algebra Power

Sum each row (or column) of the matrix‚Äîleveraging vectorized operations.

```{python}
_degrees = matrix.sum(axis=1)  # Sum rows
print("Degrees from adjacency matrix:", _degrees)
```

::: {.column-margin}
For undirected networks, row sums equal column sums. For directed networks, row sums give out-degree (outgoing connections) while column sums give in-degree (incoming connections).
:::

## Summary: From Euler's Insight to Modern Computation

You now understand how to:

1. **Represent networks** using edge lists, adjacency lists, and adjacency matrices
2. **Compute node degrees** efficiently using different data structures

The next step is to practice these concepts with real network data and explore more advanced network analysis techniques!---
title: "Advanced: Sparse Matrices for Large-Scale Networks"
jupyter: python3
---

## The Scale Problem: From K√∂nigsberg to Global Networks

While Euler's analysis worked perfectly for K√∂nigsberg's 4 landmasses and 7 bridges, today's networks operate at vastly different scales. Suppose we want to represent the social network of all people on Earth using an adjacency matrix. How much memory would we need?
For an adjacency matrix with 8 billion nodes, the matrix size is $8 \times 10^9 \times 8 \times 10^9 = 64 \times 10^{18}$ entries, and the memory required is $64 \times 10^{18} \times 8$ bytes ‚âà 512 exabytes! Clearly, this approach is not feasible!

A way to solve this problem is to exploit the fact that real networks are **sparse**: most pairs of nodes are not connected.

To give you an idea, let's consider a social network of 8 billion people on Earth. How likely do you think that two randomly picked people are friends? If the network is dense, it should be likely. But in reality, it is very unlikely, right? So much so that the probability is almost zero (less than 3.1e-23 if each person has 100 friends on average)!

This means that working with the edge list is a good idea as it retains only the connections, not the non-connections (which are much more than the connections!). But the edge list is not efficient for many operaitions

::: {.column-margin}

Think about the following operations:

- **Degree**: How many friends does a person have?
- **Neighbors**: Who are the friends of a person?

These operations are very common in network analysis. To do so, you need to go through **all the edges** in the network. This is not efficient, especially for large networks.

:::

## Solution: Sparse Matrices

We say a matrix is sparse if the matrix has only a handful of non-zero entries. This is indeed the case for most real-world networks. For such networks, we can use a special type of data type called **Compressed Sparse Row (CSR)** or **Compressed Sparse Column (CSC)** to represent the network. This is widely used in many network analysis tools and makes it possible to process large networks in practice.


To learn more, [here is a very good blog post by Matt Eding about efficient network representations](https://matteding.github.io/2019/04/25/sparse-matrices/).

