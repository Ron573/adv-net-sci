{
  "hash": "8bd531a8395a0eb1f01cd8751e5ba043",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Coding Networks in Python\njupyter: python3\nexecute:\n    enabled: true\n---\n\nNow that you understand the conceptual foundation from Euler's work, let's explore how to represent and analyze networks computationally. Given a network of any size, our goal is to create a function that can tell us whether the network has an Euler path or not.\n\n```python\ndef has_euler_path(A):\n    \"\"\"\n    Check if a graph has an Euler path based on node degrees.\n    Complete this function based on Euler's theorem.\n\n    A: network\n    return: True if the network has an Euler path, False otherwise\n    \"\"\"\n    pass\n```\n\nWe'll work through both general network representations and apply them specifically to the Königsberg bridge problem.\n\n## Network Representations: From Pictures to Data Structures\n\nConsider this network with 5 nodes and 6 edges:\n\n::: {#fig-small-graph}\n\n![](https://www.tandfonline.com/cms/asset/2820b951-1747-4621-802c-8d04263f106c/tcon_a_1707286_f0001_oc.jpg){width=200px}\n\nA small graph of five nodes and six edges.\n\n:::\n\nHow do we represent this graph in a format that a computer can understand and manipulate? Just as Euler needed to abstract Königsberg's bridges, we need data structures that capture the network's essential connectivity while enabling efficient analysis.\n\n::: {.column-margin}\nThe choice of representation can dramatically affect computational efficiency. For sparse networks (few edges), adjacency lists are memory-efficient. For dense networks or matrix operations, adjacency matrices are preferred.\n:::\n\nLet's explore three fundamental approaches that form the backbone of all network algorithms.\n\n### Edge Table: The Direct Approach\n\nThe edge table directly lists connections as pairs—the most intuitive way to store network data.\n\n::: {.column-margin}\nEdge tables are also called \"edge lists\" and are the most common format for storing large-scale network data in files. Social media platforms like Twitter and Facebook store billions of connections this way.\n:::\n\n::: {#3e9b70f8 .cell execution_count=1}\n``` {.python .cell-code}\n# Each row represents one edge (connection between two nodes)\nedges = [\n    (0, 1),  # Node 0 connects to Node 1\n    (0, 2),  # Node 0 connects to Node 2\n    (1, 2),  # Node 1 connects to Node 2\n    (1, 3),  # Node 1 connects to Node 3\n    (2, 4),  # Node 2 connects to Node 4\n    (3, 4)   # Node 3 connects to Node 4\n]\n\nprint(f\"Network has {len(edges)} edges\")\nprint(\"Edge list:\", edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNetwork has 6 edges\nEdge list: [(0, 1), (0, 2), (1, 2), (1, 3), (2, 4), (3, 4)]\n```\n:::\n:::\n\n\nThis mirrors how we'd naturally describe the network: \"Node 0 connects to nodes 1 and 2, node 1 connects to nodes 0, 2, and 3...\" It's the digital equivalent of Euler's original approach—simply listing which bridges connect which landmasses.\n\n### Adjacency List: The Neighborhood Map\n\nThe adjacency list stores each node's neighbors in a dictionary—like a social network where each person has a list of friends.\n\n::: {.column-margin}\nMost graph algorithms prefer adjacency lists because they allow fast iteration over a node's neighbors. This is crucial for algorithms like breadth-first search or computing clustering coefficients.\n:::\n\n::: {#28d2003d .cell execution_count=2}\n``` {.python .cell-code}\n# Define adjacency list directly as a dictionary\nneighbors = {\n    0: [1, 2],     # Node 0 connects to nodes 1 and 2\n    1: [0, 2, 3],  # Node 1 connects to nodes 0, 2, and 3\n    2: [0, 1, 4],  # Node 2 connects to nodes 0, 1, and 4\n    3: [1, 4],     # Node 3 connects to nodes 1 and 4\n    4: [2, 3]      # Node 4 connects to nodes 2 and 3\n}\n\nprint(\"Adjacency list representation:\")\nfor node, neighbor_list in neighbors.items():\n    print(f\"Node {node}: {neighbor_list}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAdjacency list representation:\nNode 0: [1, 2]\nNode 1: [0, 2, 3]\nNode 2: [0, 1, 4]\nNode 3: [1, 4]\nNode 4: [2, 3]\n```\n:::\n:::\n\n\n### Adjacency Matrix: The Mathematical Grid\n\nThe adjacency matrix uses a grid where entry (i,j) = 1 if nodes are connected—the mathematician's favorite representation.\n\n::: {.column-margin}\nAdjacency matrices enable powerful mathematical operations. Matrix multiplication reveals paths of different lengths, and eigenvalue analysis can uncover community structure. Google's PageRank algorithm fundamentally relies on matrix operations.\n:::\n\n::: {#0fd7edb5 .cell execution_count=3}\n``` {.python .cell-code}\n# Define adjacency matrix directly\nimport numpy as np\n\nmatrix = np.array([\n    [0, 1, 1, 0, 0],  # Node 0 connects to nodes 1, 2\n    [1, 0, 1, 1, 0],  # Node 1 connects to nodes 0, 2, 3\n    [1, 1, 0, 0, 1],  # Node 2 connects to nodes 0, 1, 4\n    [0, 1, 0, 0, 1],  # Node 3 connects to nodes 1, 4\n    [0, 0, 1, 1, 0]   # Node 4 connects to nodes 2, 3\n])\n\nprint(\"Adjacency matrix:\")\nprint(matrix)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAdjacency matrix:\n[[0 1 1 0 0]\n [1 0 1 1 0]\n [1 1 0 0 1]\n [0 1 0 0 1]\n [0 0 1 1 0]]\n```\n:::\n:::\n\n\nNotice the symmetry: if node i connects to node j, then node j connects to node i (for undirected networks). This symmetry disappears in directed networks, where relationships can be one-way.\n\n## Counting Node Degrees: Euler's Key Insight\n\nThe degree of a node is the number of edges connected to it. This simple concept was central to Euler's proof—he realized that a valid bridge walk requires each landmass to have an even degree (except possibly the starting and ending points).\n\n::: {.column-margin}\nIn Königsberg, all four landmasses had odd degree, making the bridge walk impossible. This insight—that global properties emerge from local structure—remains fundamental to network analysis today.\n:::\n\nHere's how to compute degrees using each representation:\n\n### From Edge Table: Counting Appearances\n\nCount how many times each node appears in the edge list.\n\n::: {#ca144f58 .cell execution_count=4}\n``` {.python .cell-code}\n_degrees = [0] * 5\nfor node1, node2 in edges:\n    _degrees[node1] += 1\n    _degrees[node2] += 1\nprint(\"Degrees from edge list:\", _degrees)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDegrees from edge list: [2, 3, 3, 2, 2]\n```\n:::\n:::\n\n\n::: {.column-margin}\nWe increment the degree counter for both nodes in each edge because every edge contributes to two nodes' degrees. This is why the total degree always equals twice the number of edges.\n:::\n\n### From Adjacency List: Counting Friends\n\nCount the length of each node's neighbor list—the most direct approach.\n\n::: {#0de98209 .cell execution_count=5}\n``` {.python .cell-code}\n_degrees = [len(neighbors[i]) for i in range(5)]\nprint(\"Degrees from adjacency list:\", _degrees)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDegrees from adjacency list: [2, 3, 3, 2, 2]\n```\n:::\n:::\n\n\n### From Adjacency Matrix: Linear Algebra Power\n\nSum each row (or column) of the matrix—leveraging vectorized operations.\n\n::: {#d4c0e5e2 .cell execution_count=6}\n``` {.python .cell-code}\n_degrees = matrix.sum(axis=1)  # Sum rows\nprint(\"Degrees from adjacency matrix:\", _degrees)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDegrees from adjacency matrix: [2 3 3 2 2]\n```\n:::\n:::\n\n\n::: {.column-margin}\nFor undirected networks, row sums equal column sums. For directed networks, row sums give out-degree (outgoing connections) while column sums give in-degree (incoming connections).\n:::\n\n## Summary: From Euler's Insight to Modern Computation\n\nYou now understand how to:\n\n1. **Represent networks** using edge lists, adjacency lists, and adjacency matrices\n2. **Compute node degrees** efficiently using different data structures\n\nThe next step is to practice these concepts with real network data and explore more advanced network analysis techniques!\n\n",
    "supporting": [
      "02-coding_files"
    ],
    "filters": [],
    "includes": {}
  }
}