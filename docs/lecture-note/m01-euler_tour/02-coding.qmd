---
title: Coding Networks in Python
filters:
  - marimo-team/marimo
  - tikz
tikz:
  cache: false
  save-tex: true  # Enable saving intermediate .tex files
  tex-dir: tikz-tex  # Optional: Specify directory to save .tex files
jupyter: python3
---

Now that you understand the conceptual foundation from Euler's work, let's explore how to represent and analyze networks computationally. We'll work through both general network representations and apply them specifically to the Königsberg bridge problem.

## How to Run This Notebook

::: {.callout-tip}
## Running with Marimo

To run the notebook, first download it as a .py file, then use the following steps:


```bash
marimo edit --sandbox <filename>.py
```

The notebook will open in your web browser. All necessary packages will be installed automatically in a dedicated virtual environment managed by uv.
:::

## Network Representations: From Pictures to Data Structures

Consider this network with 5 nodes and 6 edges:


![](https://www.tandfonline.com/cms/asset/2820b951-1747-4621-802c-8d04263f106c/tcon_a_1707286_f0001_oc.jpg)

How do we represent this graph in a format that a computer can understand and manipulate? Just as Euler needed to abstract Königsberg's bridges, we need data structures that capture the network's essential connectivity while enabling efficient analysis.

::: {.column-margin}
The choice of representation can dramatically affect computational efficiency. For sparse networks (few edges), adjacency lists are memory-efficient. For dense networks or matrix operations, adjacency matrices are preferred.
:::

Let's explore three fundamental approaches that form the backbone of all network algorithms.

### Edge Table: The Direct Approach

The edge table directly lists connections as pairs—the most intuitive way to store network data.

::: {.column-margin}
Edge tables are also called "edge lists" and are the most common format for storing large-scale network data in files. Social media platforms like Twitter and Facebook store billions of connections this way.
:::

```{python}
# Each row represents one edge (connection between two nodes)
edges = [
    (0, 1),  # Node 0 connects to Node 1
    (0, 2),  # Node 0 connects to Node 2
    (1, 2),  # Node 1 connects to Node 2
    (1, 3),  # Node 1 connects to Node 3
    (2, 4),  # Node 2 connects to Node 4
    (3, 4)   # Node 3 connects to Node 4
]

print(f"Network has {len(edges)} edges")
print("Edge list:", edges)
```

This mirrors how we'd naturally describe the network: "Node 0 connects to nodes 1 and 2, node 1 connects to nodes 0, 2, and 3..." It's the digital equivalent of Euler's original approach—simply listing which bridges connect which landmasses.

### Adjacency List: The Neighborhood Map

The adjacency list stores each node's neighbors in a dictionary—like a social network where each person has a list of friends.

::: {.column-margin}
Most graph algorithms prefer adjacency lists because they allow fast iteration over a node's neighbors. This is crucial for algorithms like breadth-first search or computing clustering coefficients.
:::

```{python}
# Define adjacency list directly as a dictionary
neighbors = {
    0: [1, 2],     # Node 0 connects to nodes 1 and 2
    1: [0, 2, 3],  # Node 1 connects to nodes 0, 2, and 3
    2: [0, 1, 4],  # Node 2 connects to nodes 0, 1, and 4
    3: [1, 4],     # Node 3 connects to nodes 1 and 4
    4: [2, 3]      # Node 4 connects to nodes 2 and 3
}

print("Adjacency list representation:")
for node, neighbor_list in neighbors.items():
    print(f"Node {node}: {neighbor_list}")
```

### Adjacency Matrix: The Mathematical Grid

The adjacency matrix uses a grid where entry (i,j) = 1 if nodes are connected—the mathematician's favorite representation.

::: {.column-margin}
Adjacency matrices enable powerful mathematical operations. Matrix multiplication reveals paths of different lengths, and eigenvalue analysis can uncover community structure. Google's PageRank algorithm fundamentally relies on matrix operations.
:::

```{python}
# Define adjacency matrix directly
import numpy as np

matrix = np.array([
    [0, 1, 1, 0, 0],  # Node 0 connects to nodes 1, 2
    [1, 0, 1, 1, 0],  # Node 1 connects to nodes 0, 2, 3
    [1, 1, 0, 0, 1],  # Node 2 connects to nodes 0, 1, 4
    [0, 1, 0, 0, 1],  # Node 3 connects to nodes 1, 4
    [0, 0, 1, 1, 0]   # Node 4 connects to nodes 2, 3
])

print("Adjacency matrix:")
print(matrix)
```

Notice the symmetry: if node i connects to node j, then node j connects to node i (for undirected networks). This symmetry disappears in directed networks, where relationships can be one-way.

## Counting Node Degrees: Euler's Key Insight

The degree of a node is the number of edges connected to it. This simple concept was central to Euler's proof—he realized that a valid bridge walk requires each landmass to have an even degree (except possibly the starting and ending points).

::: {.column-margin}
In Königsberg, all four landmasses had odd degree, making the bridge walk impossible. This insight—that global properties emerge from local structure—remains fundamental to network analysis today.
:::

Here's how to compute degrees using each representation:

### From Edge Table: Counting Appearances

Count how many times each node appears in the edge list.

```{python}
_degrees = [0] * 5
for node1, node2 in edges:
    _degrees[node1] += 1
    _degrees[node2] += 1
print("Degrees from edge list:", _degrees)
```

::: {.column-margin}
We increment the degree counter for both nodes in each edge because every edge contributes to two nodes' degrees. This is why the total degree always equals twice the number of edges.
:::

### From Adjacency List: Counting Friends

Count the length of each node's neighbor list—the most direct approach.

```{python}
_degrees = [len(neighbors[i]) for i in range(5)]
print("Degrees from adjacency list:", _degrees)
```

### From Adjacency Matrix: Linear Algebra Power

Sum each row (or column) of the matrix—leveraging vectorized operations.

```{python}
_degrees = matrix.sum(axis=1)  # Sum rows
print("Degrees from adjacency matrix:", _degrees)
```

::: {.column-margin}
For undirected networks, row sums equal column sums. For directed networks, row sums give out-degree (outgoing connections) while column sums give in-degree (incoming connections).
:::

## Summary: From Euler's Insight to Modern Computation

You now understand how to:

1. **Represent networks** using edge lists, adjacency lists, and adjacency matrices
2. **Compute node degrees** efficiently using different data structures

The next step is to practice these concepts with real network data and explore more advanced network analysis techniques!