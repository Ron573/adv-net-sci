{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Stochastic Block Model\n",
        "\n",
        "Let's talk about two ways to look at communities in networks.\n",
        "\n",
        "In modularity maximization, we are given a network and asked to find the best way to group its parts into communities.\n",
        "\n",
        "Let's flip that idea on its head! 🙃 Instead of starting with a network and looking for communities, we start with the communities and ask, *\"What kind of network would we get if the nodes form these communities?\"*. This is the idea of the **Stochastic Block Model (SBM)**.\n",
        "\n",
        "While modularity maximization is about finding hidden patterns, SBM is about imagining what a network would look like based on a given community structure. Two sides of the same coin, each giving us a unique perspective on community detection.\n",
        "\n",
        "## Model\n",
        "\n",
        "In stochastic block model, we describe a network using probabilities given a community structure. Specifically, let us consider two nodes $i$ and $j$ who belong to community $c_i$ and $c_j$. Then, the probability of an edge between $i$ and $j$ is given by their community membership.\n",
        "\n",
        "$$\n",
        "P(A_{ij}=1|c_i, c_j) = p_{c_i,c_j}\n",
        "$$\n",
        "\n",
        "where $p_{c_i,c_j}$ is the probability of an edge between nodes in community $c_i$ and $c_j$, respectively.\n",
        "Notice that the edge probability is fully specified by the community membership of the nodes.\n",
        "This means that nodes in a community are connected with the same probability irrespective of the nodes themselves, and the nodes in different two communities are also connected with the same probability.\n",
        "As a result, when plotting the adjacency matrix, we observe \"blocks\" of different edge densities, which is why we say that SBM is a \"block model\"."
      ],
      "id": "08b832a1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        ":tags: [hide-input]\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "import igraph\n",
        "\n",
        "# Generate SBM\n",
        "n, k = 900, 3\n",
        "\n",
        "# Create block sizes (equal for simplicity)\n",
        "block_sizes = [n // k] * k\n",
        "\n",
        "# Create diverse pref matrix\n",
        "pref_matrix = [\n",
        "    [0.3, 0.05, 0.1],\n",
        "    [0.05, 0.4, 0.02],\n",
        "    [0.1, 0.02, 0.35]\n",
        "]\n",
        "\n",
        "# Generate SBM using igraph\n",
        "g = igraph.Graph.SBM(n, pref_matrix, block_sizes)\n",
        "\n",
        "# Convert to adjacency matrix for visualization\n",
        "A = np.array(g.get_adjacency().data)\n",
        "\n",
        "# Plot\n",
        "plt.figure(figsize=(8, 8))\n",
        "plt.imshow(A, cmap='binary')\n",
        "plt.title(\"Adjacency Matrix of Stochastic Block Model\")\n",
        "plt.xlabel(\"Node Index\")\n",
        "plt.ylabel(\"Node Index\")\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "ef6febae",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Characterizing network structures with the SBM\n",
        "\n",
        "Stochastic Block Model is a flexible model that can be used to describe a wide range of network structures.\n",
        "\n",
        "Let's start with communities where nodes within a community are more likely to be connected to each other than nodes in different communities. We can describe this using SBM by:\n",
        "\n",
        "$$\n",
        "P_{c,c'} = \\begin{cases}\n",
        "    p_{\\text{in}} & \\text{if } c = c' \\\\\n",
        "    p_{\\text{out}} & \\text{if } c \\neq c'\n",
        "\\end{cases}\n",
        "$$\n",
        "\n",
        "-  $p_{\\text{in}}$ is the chance of a connection between nodes in the same community\n",
        "- $p_{\\text{out}}$ is the chance of a connection between nodes in different communities\n",
        "\n",
        "Usually, we set $p_{\\text{in}} > p_{\\text{out}}$, because nodes in the same community tend to be more connected.\n",
        "\n",
        "But, there's more SBM can do:\n",
        "\n",
        "1. **Disassortative communities**: What if we flip things around and set $p_{\\text{in}} < p_{\\text{out}}$? Now we have communities where nodes prefer to connect with nodes from other communities. This is not in line with the communities we have focused on so far. Yet, it is still a valid model of community structure, and SBM allows for this generalization of community structure easily.\n",
        "\n",
        "2. **Random networks**: If we make $p_{\\text{in}} = p_{\\text{out}}$, we get a completely random network where every node has an equal chance of connecting to any other node. This is what we call an Erdős-Rényi network.\n",
        "\n",
        "In sum, SBM has been used as a playground for network scientists. We can use it to create many interesting network structures and study how they behave.\n",
        "\n",
        "## Generating networks with SBM\n",
        "\n",
        "It is easy to generate networks with SBM using igraph.\n",
        "For example, the assortativity communities can be generated as follows."
      ],
      "id": "338a0a8b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import igraph\n",
        "\n",
        "p_in = 0.1\n",
        "p_out = 0.001\n",
        "block_sizes = [100, 200, 300]\n",
        "n = sum(block_sizes)\n",
        "\n",
        "pref_matrix = [\n",
        "    [p_in, p_out, p_out],\n",
        "    [p_out, p_in, p_out],\n",
        "    [p_out, p_out, p_in]\n",
        "]\n",
        "\n",
        "g = igraph.Graph.SBM(n, pref_matrix, block_sizes)\n",
        "\n",
        "# Plot the network\n",
        "import seaborn as sns\n",
        "palette = sns.color_palette()\n",
        "\n",
        "community_colors = sum([[palette[i]] * block_sizes[i] for i in range(len(block_sizes))], [])\n",
        "igraph.plot(g, vertex_color=community_colors)"
      ],
      "id": "98595250",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "- `pref_matrix` is the matrix of connection probabilities between communities. Its $(i,j)$th-element is the probability of a connection between nodes in community $i$ and $j$.\n",
        "\n",
        "\n",
        "## Detecting communities with SBM\n",
        "\n",
        "Imagine you're a detective trying to figure out how a network was created. You have a hunch about the community structure, and you want to know if it matches the network you see. That's exactly what we're going to do to find out communities!\n",
        "\n",
        "Here's how we can describe the probability of seeing a particular network, given a community structure:\n",
        "\n",
        "$$\n",
        "P(\\left\\{A_{ij}\\right\\}_{ij}) = \\prod_{i<j} P(A_{ij}=1|c_i, c_j)^{A_{ij}} (1-P(A_{ij}=1|c_i, c_j))^{1-A_{ij}}\n",
        "$$\n",
        "\n",
        "Let's break this down into simpler terms:\n",
        "\n",
        "- First, $\\left\\{A_{ij}\\right\\}_{ij}$ is just a fancy way of saying \"all the connections in our network\". Think of it as a big table showing who's connected to whom.\n",
        "\n",
        "- We use $\\prod_{i < j}$ instead of $\\prod_{i,j}$ because we're dealing with an undirected network. This means if Alice is friends with Bob, Bob is also friends with Alice. We only need to count this friendship once, not twice!\n",
        "\n",
        "- The last part, $P(A_{ij}=1|c_i, c_j)^A_{ij}(1-P(A_{ij}=1|c_i, c_j))^{1-A_{ij}}$, might look scary, but it's actually quite clever. It's a shorthand way of saying \"what's the chance of this connection existing or not existing?\" If the connection exists ($A_{ij}=1$), we use the first part. If it doesn't ($A_{ij}=0$), we use the second part. It's a two-in-one formula.\n",
        "\n",
        "Here's a neat trick we can use to make our lives easier. We can take the logarithm of both sides of our equation. This turns our big product (multiplication) into a simpler sum (addition).\n",
        "\n",
        "$$\n",
        "{\\cal L}=\\log P(\\left\\{A_{ij}\\right\\}_{ij}) = \\sum_{i<j} A_{ij} \\log P(A_{ij}=1|c_i, c_j) + (1-A_{ij}) \\log (1-P(A_{ij}=1|c_i, c_j))\n",
        "$$\n",
        "\n",
        "We call this the **likelihood function**. It tells us how likely we are to see this network given our community guess. We can play around with different community assignments and edge probabilities to see which one gives us the highest likelihood.\n",
        "To make this game easier, let's first figure out the best edge probabilities for a given community assignment.\n",
        "\n",
        "Our likelihood function has a special shape - it is *a concave function* with respect to $p_{c,c'}$. This means that the likelihood function is a hill with only one peak when we look at it in terms of edge probability $p_{c,c'}$."
      ],
      "id": "653a93b2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        ":tags: [remove-input]\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def concave_function(x):\n",
        "    return -(x - 0.5)**2 + 0.25\n",
        "\n",
        "x = np.linspace(0, 1, 100)\n",
        "y = concave_function(x)\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(x, y, 'b-', linewidth=2)\n",
        "plt.title('Schematic of Likelihood Function (Concave)')\n",
        "plt.xlabel('Edge Probability p_c,c\\'')\n",
        "plt.ylabel('Likelihood')\n",
        "plt.axvline(x=0.5, color='r', linestyle='--', label='Maximum')\n",
        "plt.annotate('Global Maximum', xy=(0.5, 0.25), xytext=(0.6, 0.2),\n",
        "             arrowprops=dict(facecolor='black', shrink=0.05))\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "id": "026eb97e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "So, what does this mean for us? The top of this hill (our maximum value) is flat, and there's only one flat spot on the whole hill. So if we can find a spot where the hill isn't sloping at all (that's what we mean by \"zero gradient\"), we've found the very top of the hill! 🏔️\n",
        "\n",
        "In math terms, we take the derivative of our likelihood function with respect to $p_{c,c'}$ and set it to zero, i.e., $\\partial {\\cal L}  / \\partial p_{cc'} = 0$. Here is what we get:\n",
        "\n",
        "\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\frac{\\partial {\\cal L}}{\\partial p_{c,c'}} &= 0 \\\\\n",
        "\\Rightarrow & \\sum_{i<j} \\left[A_{ij} \\frac{1}{p_{c_i,c_j}} \\delta(c_i,c)\\delta(c_j,c') -(1-A_{ij}) \\frac{1}{1-p_{c_i,c_j}}\\delta(c_i,c')\\delta(c_j,c') \\right] = 0 \\\\\n",
        "\\Rightarrow &\n",
        "\\frac{m_{cc'}}{p_{c_i,c_j}} - \\frac{\\sum_{i < j} \\delta(c_i,c)\\delta(c_j,c') }{1-p_{c_i,c_j}} = 0 & \\text{if } c \\neq  c' \\\\\n",
        "\\Rightarrow & p_{c,c'} = \\frac{m_{cc'}}{\\sum_{i < j} \\delta(c_i,c)\\delta(c_j,c')}\n",
        "\\end{aligned}\n",
        "$$\n",
        "\n",
        "Let's break down these equations:\n",
        "\n",
        "- $m_{cc'}$ is the number of edges between nodes in community $c$ and those in community $c'$.\n",
        "- The derivative $\\partial \\log p_{cc} / \\partial p_{cc}$ is just $1/p_{cc}$.\n",
        "\n",
        "The denominator $\\sum_{i < j} \\delta(c_i,c)\\delta(c_j,c')$ is the total number of pairs of nodes that belong to communities $c$ and $c'$. It is given by\n",
        "\n",
        "\n",
        "$$\n",
        "\\sum_{i < j} \\delta(c_i,c)\\delta(c_j,c') =\n",
        "\\begin{cases}\n",
        "n_cn_{c'} & \\text{if } c \\neq c' \\\\\n",
        "\\frac{n_c (n_c - 1)}{2} & \\text{if } c = c'\n",
        "\\end{cases}\n",
        "$$\n",
        "\n",
        "Why do we have two different equations for $p_{c,c'}$? It's because we are counting each pair of nodes only by once. It is easy to verify when looking at the adjacency matrix:"
      ],
      "id": "4183f539"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        ":tags: [remove-input]\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import igraph\n",
        "\n",
        "# Generate SBM\n",
        "n, k = 900, 3\n",
        "\n",
        "# Create block sizes (equal for simplicity)\n",
        "block_sizes = [n // k] * k\n",
        "\n",
        "# Create diverse pref matrix\n",
        "pref_matrix = [\n",
        "    [0.3, 0.05, 0.1],\n",
        "    [0.05, 0.4, 0.02],\n",
        "    [0.1, 0.02, 0.35]\n",
        "]\n",
        "\n",
        "# Generate SBM using igraph\n",
        "g = igraph.Graph.SBM(n, pref_matrix, block_sizes)\n",
        "\n",
        "# Convert to adjacency matrix for visualization\n",
        "A = np.array(g.get_adjacency().data)\n",
        "\n",
        "# Create the plot\n",
        "fig, ax = plt.subplots(figsize=(6, 6))\n",
        "\n",
        "# Plot the adjacency matrix\n",
        "ax.matshow(A, cmap='binary')\n",
        "mask = np.triu(np.ones_like(A, dtype=bool), k=1)\n",
        "\n",
        "# Highlight the upper triangle with yellow overlay\n",
        "ax.matshow(np.ma.masked_array(np.ones_like(A), ~mask), cmap='Reds_r', alpha=0.3)\n",
        "\n",
        "# Add a title\n",
        "plt.title(\"Adjacency Matrix with Highlighted Upper Triangle\")\n",
        "\n",
        "plt.show()"
      ],
      "id": "75f66268",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The upper triangle of the adjacency matrix represents $i < j$ over which we take the sum.\n",
        "When $c=c'$ (the diagonal block), we count only the upper half of the block, resulting in $\\frac{n_c (n_c - 1)}{2}$. When $c \\neq c'$ (different communities), we count all connections between them, resulting in $n_cn_{c'}$.\n",
        "\n",
        "We have now obtaind the likelihood function based only on the community assignment. Maximizing ${\\cal L}$ with respect to the community assignment gives us the most likely community assignment for the network.\n",
        "\n",
        "```{footbibliography}\n",
        "```"
      ],
      "id": "be2eeae1"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "netdatasci",
      "language": "python",
      "display_name": "netdatasci",
      "path": "/Users/skojaku-admin/Library/Jupyter/kernels/netdatasci"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}