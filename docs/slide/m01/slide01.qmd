---
title: "M01: Introduction & Seven Bridges of K√∂nigsberg"
author: "Sadamori Kojaku"
format:
  revealjs:
    slide-number: true
    chalkboard:
      buttons: false
    preview-links: auto
    theme: simple
    css: css/style.css
---

# Check list

- [ ] Microphone turned on
- [ ] Zoom room open
- [ ] MyBinder launched
- [ ] Sound Volume on

# Introduction
:::: {.columns}

::: {.column width="50%"}
Advanced Topics in Network Science

Sadamori Kojaku

skojaku@binghamton.edu

:::

::: {.column width="50%"}

![](https://newmedialab.cuny.edu/wp-content/uploads/2014/01/Internet.gif)

:::

::::



## Enginet

![](../enginet-intro-slide/enginet-01.png)

## Enginet

![](../enginet-intro-slide/enginet-02.png)

## Enginet

![](../enginet-intro-slide/enginet-03.png)

## Course Overview

- **Instructor:** Sadamori Kojaku (Âπ∏Ëã•ÂÆåÂ£Æ)
- **Email:** skojaku@binghamton.edu
- **Office Hours:** Monday 10:00-14:00
- **Course Website:** [https://skojaku.github.io/adv-net-sci](https://skojaku.github.io/adv-net-sci)


## Let's start with a story... ü¶†

::: {.callout-note title = "Question:"}

2009: H1N1 pandemic spreads globally

Do you remember which countries were infected first and second?

:::

Think about it... discuss with your neighbor for 30 seconds

::: {.incremental}

- **Your predictions:**

  - Geographic distance matters?
  - Nearby countries first?
  - Then spreading outward in circles?

- *Let's hear some thoughts...*

:::

## Answer

::: {.callout-tip title = "Answer:"}

- First: United States

- Second: **Spain**

:::

## Here's what actually happened...

<img src="https://www.science.org/cms/10.1126/science.1245200/asset/59290a15-76de-4a0f-9107-259201f98bcf/assets/graphic/342_1337_f1.jpeg" style="width: 100%; max-width: none; margin-bottom: 20px;">

**Question:** What do you notice? Does this match your prediction?

---

**Key insight:** Network structure (air travel) determined spread, not geography!

<img src="https://www.science.org/cms/10.1126/science.1245200/asset/66d5a7ec-a683-4135-af2f-149c91007e48/assets/graphic/342_1337_f2.jpeg" style="width: 100%; max-width: none; margin-bottom: 20px;">


## Quick Exercise: Spot the Networks! üëÄ

::: {.callout-note title = "Challenge:"}
**Look around you right now...**

What networks do you interact with daily?

*Take 1 minute - list as many networks as you can*
:::

## Let's Share! üó£Ô∏è

**What did you come up with?**

*I'll collect a few examples from the class...*

## Here Are Some You Might Have Missed:

:::: {.columns}

::: {.column width="50%"}

**Plant-Pollinator Networks** üåº


**Question:** How is this a network? What are the connections?

:::

::: {.column width="50%"}

**Your Brain Right Now!** üß†


*As you're listening, billions of neurons are connecting...*

:::

::::

## Social Networks (Obviously!) üì±

:::: {.columns}

::: {.column width="50%"}


:::

::: {.column width="50%"}

::: {.callout-note title = "Question:"}
**How do ideas spread through social networks?**

Same as diseases? Different?
:::

*Turn to your neighbor - what do you think?*

:::

::::

## How Did You Get to Class Today? üöó


**Transportation networks shape our daily choices!**

## Wait - Isn't This Just Graph Theory? ü§î

::: {.callout-note title = "Question:"}
**Who has taken a math course with graphs before?**

*Raise your hands... what did you study?*
:::

## Traditional Graph Theory üìê

:::: {.columns}

::: {.column width="50%"}


:::

::: {.column width="50%"}

::: {.callout-note title = "Question:"}
**What do you notice about this pattern?**

*Perfect, regular, predictable...*
:::

:::

::::

## Real-World Networks Look Like This:

:::: {.columns}

::: {.column width="60%"}


:::

::: {.column width="40%"}

::: {.callout-note title = "Question:"}
**What's different here?**

Why does this "messiness" matter?
:::

*Discuss with your neighbor - what makes real networks "messy"?*

:::

::::

## Thought Experiment ü§î

:::: {.columns}

::: {.column width="70%"}

::: {.callout-note title = "Question:"}
**Imagine you're an Alien scientist (like von Neumann!) studying humans...**

You understand every single neuron in the human brain perfectly.

**Can you predict what a human will say next? What they'll dream about?**
:::

*What do you think? Turn to your neighbor and discuss...*

:::

::: {.column width="30%"}

![](https://upload.wikimedia.org/wikipedia/commons/5/5e/JohnvonNeumann-LosAlamos.gif){width=50% fig-align="center"}

:::

::::

## The Reductionist Approach üß©

:::: {.columns}

::: {.column width="40%"}

::: {.callout-note title = "Method:"}
*Break it down ‚Üí Understand parts ‚Üí Reassemble*
:::

**When does this work well?**

*Give me an example...*

:::

::: {.column width="60%"}


:::

::::

## But Sometimes... üåê

:::: {.columns}

::: {.column width="50%"}

::: {.callout-tip title = "Network Science:"}
*The whole > sum of parts*
:::

::: {.callout-note title = "Question:"}
**Why can't we predict consciousness from individual neurons?**

*What's missing in the reductionist approach?*
:::

:::

::: {.column width="50%"}


:::

::::



## Course Objectives

:::: {.columns}

::: {.column width="40%"}

We will:

- üîç Analyze networks
- üß† Learn key concepts
- ü§ñ Apply AI to networks

:::


::: {.column width="60%"}

After this course, you'll be able to:

- üìñ Understand network science papers
- üõ†Ô∏è Do advanced network analysis
- üìù Design network research
- üîó Connect Systems Science and networks

:::

::::

---


:::: {.columns}

::: {.column width="50%"}

### Core Learning Philosophy

- Learning by doing


- *Doing it wrong, and learning from it!*

- There are many traps to make you fail!
(not in the sense of failing the course)


:::

::: {.column width="50%"}

![](https://media1.tenor.com/m/-LDi5jsgk_8AAAAd/bruce-lee-dont-think.gif){width=70% fig-align="center" style="display:block; margin-left:auto; margin-right:auto;"}

![](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS_NZxWrYf1VvFyG5we1DtkTZOkbsVkbUFtAg&s){width=80% fig-align="center"}

:::

::::


## Trap \#1

:::: {.columns}

::: {.column width="60%"}

**Pen & Paper Exercise**

All modules start with an in-class pen & paper exercise.

- Bring your pen to class
- You solve it by yourself
- Then, discuss with your mates

:::

::: {.column width="40%"}

![](https://static1.xdaimages.com/wordpress/wp-content/uploads/wm/2024/09/why-i-use-pen-and-paper-with-note-taking-apps.jpg)

:::

::::

## Trap \#2

:::: {.columns}

::: {.column width="60%"}

**Interactive Visualization**

Most modules have an interactive game to play

- Wining the game requires Network Science knowledge
- You don't have the knowledge initially but play the game
- You will learn Network Science by learning how to win the game

:::

::: {.column width="40%"}

Link: [Vaccination Game](https://skojaku.github.io/adv-net-sci/assets/vis/vaccination-game.html)

<iframe src="https://skojaku.github.io/adv-net-sci/assets/vis/vaccination-game.html" width="100%" height="500" frameborder="0"></iframe>

:::

::::

## Trap \#3

**Weekly Quiz**

Every class begins with a weekly quiz to review the previous week's topics.

- Written quiz
- Only few questions
- Graded and reviewed during the class
- You can resubmit the quiz (one time)
- (Enginet students will submit via Brightspace)

::::

## Trap \#4

:::: {.columns}

::: {.column width="60%"}

**Assignment**

- Most modules have coding assignments

- Distributed via GitHub Classroom

- Unlimited attempts until deadline

- Autograded


:::

::: {.column width="40%"}



<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vTDkP2xHhQHiAYDwy6k1KJ2HuQ6JoanN91Atdp9Wbfq8_1zvX2VKOx07xvLru4HvekNEzYC_WoUINRy/pubembed?start=false&loop=false&delayms=3000" frameborder="0" width="480" height="299" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>

We'll cover assignment submission in class. Find the detailed instruction on the lecture note.
:::

::::

## Trap \#5

::: {.columns}

::: {.column width="40%"}

**LLM Dojo**


- You'll create challenging questions for LLMs.

- You'll win if you can create one that stumps LLMs.

- Every module has a LLM Dojo exercise

- Collected & Graded on GitHub

:::

::: {.column width="60%"}

You'll create a quiz & answer for LLMs.

```toml
[[questions]]
question = """
    When is the global clustering not a
    good representation of the network?
    """
answer = """
    When the network is degree
    heterogeneous. This is because
    a single hub can create
    substantially many triangles
    in the network, not
    representing the number of
    triangles typical nodes
    in the network form.
    """
```

:::

::::

## Trap \#6

**Network of the Week**

- You'll pick a paper on network science of your interest

- You'll present the paper in the class
  - roughly 10 minutes
  - 5 mins for Q&A

- The instructor can help you find a paper

## Grading items

- Quiz (10%)
- Network of the Week Presentation (10%)
- Assignments (20%)
- Exam (30%)
- Project (30%)

::: {.incremental}
- ‚ú® Bonus (30%)
  - 10% bonus for the best project (one team)
  - 10% for the excellent Network of the Week Presentation
  - 10% bonus for excellent question-answer assignment
:::

## Exam

- **Final exam on all topics**
- During exam week (Dec 8-12)
- All multiple choice questions
- Take home exam
- Brightspace will be used for submission

## Final Project üéì

- Individual project (30% of grade) üìä
- Timeline üìÖ
  - Proposal: Sept 30; Paper: Dec 5; Presentations: Dec 9

- Requirements üìã
  - About Network Science
  - Develop a new method, new visualization, literature review, case study, etc.

## Example Project 01

Analysing the network of scientific topics

![](sci-topic-net.png)


## Example Project 02

Correlation between the neural activities of the brain

![](ecog.png)

## Example Project 03

Tesla Supercharger Network

![](super-charger.png)

# Lecture note

- üìö [Online Lecture Note](https://skojaku.github.io/adv-net-sci)
- See [The course GitHub repo](https://github.com/skojaku/adv-net-sci/) for details

## AI Tutor ü§ñ

:::: {.columns}

::: {.column width="50%"}


![](minidora.png)

**Minidora**, an AI tutor for this course available 24/7 through Discord


:::

::: {.column width="50%"}

- You can chat, ask questions, and take quizzes with Minidora.
- Sign up for the course on Discord to get access
- Demo: `/ask What is an Euler tour?`

:::

::::

## Policy

- üìö 3-credit course: 6.5+ hours of work/week outside class
- ü§ñ AI tools allowed for learning, but cite if used in assignments
- üíæ Back up all data and code (loss not an excuse for late work)
- ‚ôø Accommodations available for students with disabilities
- üö´ Zero tolerance for academic dishonesty

# Questions?

## Module 01: K√∂nigsberg Bridge Puzzle

:::: {.columns}

::: {.column width="50%"}
**Advanced Topics in Network Science**

Sadamori Kojaku

:::

::: {.column width="50%"}

![](https://99percentinvisible.org/wp-content/uploads/2022/02/bridges-with-water-600x418.png){width=100% fig-align="center"}

:::

::::


## The K√∂nigsberg Bridge Puzzle üåâ

:::: {.columns}

::: {.column width="50%"}

![](https://99percentinvisible.org/wp-content/uploads/2022/02/bridges-with-water-600x418.png){width=100% fig-align="center"}

:::

::: {.column width="50%"}

- 18th century puzzle in K√∂nigsberg, Prussia (now Kaliningrad, Russia) üá©üá™
- City had 7 bridges connecting 2 islands and mainland üèôÔ∏è
- **Challenge**: Find a route that crosses each bridge exactly once üö∂‚Äç‚ôÇÔ∏è

:::
::::

## Your turn! üß©

::: {.callout-note title = "Challenge:"}
**Find a route that crosses each bridge exactly once**
:::

*Take 10 mins - Think about your strategy through the pen & paper exercise*

[pen-and-paper worksheet](http://estebanmoro.org/pdf/netsci_for_kids/the_konisberg_bridges.pdf)

![](https://99percentinvisible.org/wp-content/uploads/2022/02/bridges-with-water-600x418.png){width=100% fig-align="center"}

---

### Euler's Revolutionary Approach üß†

**What if we ignore all the physical details? üôÇ **

What do you see in this transformation?
*What's the key insight?*


![](https://towardsdatascience.com/wp-content/uploads/2024/05/15n0gkvpktkGYtAase5oYuw-1.png){width=800 fig-align="center"}

## The Breakthrough Insight ‚ú®

**Euler realized:** Only connections matter, not physical details!

- Landmasses ‚Üí **dots** (nodes)
- Bridges ‚Üí **lines** (edges)

**Abstraction is the a cornerstone of Network Science**

*This was the birth of graph theory and network science!*

## Euler's Reasoning üßÆ

**If you walk through a node, what happens?**

You enter on one edge, leave on another...

:::: {.columns}

::: {.column width="40%"}

::: {.incremental}
- **Even number of edges**: Enter/leave perfectly ‚úÖ
- **Odd number**: One edge "left over" ‚ùå
- **Question:** Where can those "leftover" edges be?
- *Only at start/end points!*
:::

:::

::: {.column width="60%"}
```{dot}
//| fig-width: 6
//| fig-height: 3
//| fig-align: center

graph {
  layout=fdp
  sep=0.7

  // Degree 3 (odd)
  A [shape=circle, fillcolor="#f5cbcc", style="filled"];
  B1 [shape=circle, style="filled", fillcolor="#ffffff", color="#ffffff", label=""];
  B2 [shape=circle, style="filled", fillcolor="#ffffff", color="#ffffff", label=""];
  B3 [shape=circle, style="filled", fillcolor="#ffffff", color="#ffffff", label=""];

  A -- B1;
  A -- B2;
  A -- B3;

  // Degree 2 (even)
  C [shape=circle, fillcolor="#cbf5cc", style="filled"];
  D1 [shape=circle, style="filled", fillcolor="#ffffff", color="#ffffff", label=""];
  D2 [shape=circle, style="filled", fillcolor="#ffffff", color="#ffffff", label=""];

  C -- D1;
  C -- D2;

  // Horizontal positioning
  A [pos="1,0!"];
  C [pos="2,0!"];
}
```
:::

::::

---

Euler's theorem says:

:::: {.columns}

::: {.column width="50%"}



- **0 odd nodes** ‚Üí Euler circuit possible ‚úÖ
- **2 odd nodes** ‚Üí Euler path possible ‚úÖ
- **More than 2** ‚Üí ?

**What does this mean for K√∂nigsberg?**

*What's your verdict?*

:::

::: {.column width="50%"}

```{dot}
//| fig-width: 4
//| fig-height: 3
//| fig-cap: "K√∂nigsberg Bridge Problem - Seven bridges connecting four land areas"
//| fig-align: center
graph Konigsberg {
  layout=neato
  overlap=false
  sep=2.0

  // Land areas
  A [shape=circle, fillcolor="#f5cbcc", style="filled"];
  B [shape=circle, fillcolor="#f5cbcc", style="filled"];
  C [shape=circle, fillcolor="#cbf5cc", style="filled"];
  D [shape=circle, fillcolor="#cbf5cc", style="filled"];

  // Bridges (edges)
  A -- C;
  A -- C;
  A -- D;
  B -- C;
  B -- C;
  B -- D;
  C -- D;
}
```

:::

::::


## Euler's Path Theorem üèÜ

::: {.callout-tip title = "Answer:"}
An Euler path exists if and only if:

1. Graph is connected, AND

2. Either:
   - All nodes have even degree
   - Exactly two nodes have odd degree

K√∂nigsberg verdict: 4 odd-degree nodes ‚Üí **IMPOSSIBLE!**
:::

## Aftermath


:::: {.columns}

::: {.column width="50%"}

The story takes a sobering turn during World War II. In 1944, K√∂nigsberg was heavily bombed by Allied forces, and later captured by the Soviet Union. Two of the seven historic bridges were destroyed in the bombardment.

:::

::: {.column width="50%"}

![](./seven-bridge-bombared.png){width=100% fig-align="center"}

:::

::::


---

::: {.callout-note title = "Question:"}

In the previous question, we learned the condition for the possibility to cross each bridge exactly once.

Now, let's also add a new condition: *[Return to the starting point]{.red-text}.*

How does this change the condition for the possibility?

:::

*Turn to your neighbor - give specific answers for 30 seconds*

```{dot}
//| fig-width: 4
//| fig-height: 3
//| fig-cap: "K√∂nigsberg Bridge Problem - Seven bridges connecting four land areas"
//| fig-align: center
graph Konigsberg {
  layout=neato
  overlap=false
  sep=2.0

  // Land areas
  A [shape=circle, fillcolor="#f5cbcc", style="filled"];
  B [shape=circle, fillcolor="#f5cbcc", style="filled"];
  C [shape=circle, fillcolor="#cbf5cc", style="filled"];
  D [shape=circle, fillcolor="#cbf5cc", style="filled"];

  // Bridges (edges)
  A -- C;
  A -- C;
  A -- D;
  B -- C;
  B -- C;
  B -- D;
  C -- D;
}
```

---


::: {.callout-tip title = "Answer:"}

1. Graph is connected, AND

2. Either:
   - All nodes have even degree
   - ~~Exactly two nodes have odd degree~~

This is called an [Euler circuit]{.red-text}.

:::

*Why we cannot have odd-degree nodes?*

---

:::: {.columns}

::: {.column width="50%"}

- **Walk**
  - Any sequence of connected nodes
  - Can repeat nodes and edges

- **Path**

  - Sequence of connected nodes
  - No repeated nodes
  - Can end anywhere

- **Circuit**

  - Sequence of connected nodes
  - Returns to starting point
  - Can repeat nodes

:::

::: {.column width="50%"}


```{dot}
//| fig-width: 4
//| fig-height: 6
//| fig-align: center
graph Campus {
  layout=neato
  overlap=false
  sep =0.5
  // Campus locations
  Dorm [shape=circle, fillcolor="#e1f5fe", style="filled", label="Dorm"];
  Cafe [shape=circle, fillcolor="#fff3e0", style="filled", label="Cafeteria"];
  Lib [shape=circle, fillcolor="#f3e5f5", style="filled", label="Library"];
  Gym [shape=circle, fillcolor="#e8f5e8", style="filled", label="Gym"];

  // Walkways
  Dorm -- Cafe;
  Cafe -- Lib;
  Lib -- Gym;
  Gym -- Dorm;
  Cafe -- Gym;
}
```


:::

::::

<!--

## Example: Path üéØ

::: {.callout-tip title = "Path Example"}
**Route:** Dorm ‚Üí Cafeteria ‚Üí Library ‚Üí Gym

- ‚úÖ Visits each location exactly once
- ‚úÖ No repeated nodes or edges
- ‚ùå Does NOT return to start (ends at Gym)
- **Result:** This is a **path**

:::

## Example: Circuit ‚≠ï

::: {.callout-tip title = "Circuit Example"}

**Route:** Dorm ‚Üí Cafeteria ‚Üí Gym ‚Üí Library ‚Üí Cafeteria ‚Üí Dorm

- ‚úÖ Returns to starting location (Dorm)
- ‚úÖ Uses each edge exactly once
- ‚úÖ Can revisit intermediate nodes (Cafeteria visited twice)
- **Result:** This is a **circuit** (specifically an Euler circuit)

:::

## Key Insight: The Difference üí°

:::: {.columns}

::: {.column width="50%"}

### Path üéØ
- **Goal:** Visit each location once
- **Restriction:** No repeated nodes
- **End condition:** Can end anywhere
- **Example use:** Efficient campus tour

:::

::: {.column width="50%"}

### Circuit ‚≠ï
- **Goal:** Use each connection once
- **Restriction:** No repeated edges
- **End condition:** Must return to start
- **Example use:** K√∂nigsberg bridges!

:::

::::

::: {.callout-note title = "Think About It:"}
**In the campus example above:**
- Which type would a mail delivery route be? (visit every building)
- Which type would a maintenance route be? (check every pathway)
:::





## Precise Classification Exercise üìã

::: {.callout-note title = "Task:"}
**For each scenario below, identify:**
1. **What repeats?** (nodes, edges, or both?)
2. **Does it return to start?** (yes/no)
3. **What term applies?** (walk, trail, path, circuit, cycle)
:::

::: {.incremental}
- **Scenario A**: Dorm ‚Üí Cafeteria ‚Üí Library ‚Üí Dorm ‚Üí Cafeteria
  - *What repeats? Returns to start?*
- **Scenario B**: Dorm ‚Üí Cafeteria ‚Üí Library ‚Üí Gym (stops there)
  - *What repeats? Returns to start?*
- **Scenario C**: Cross each hallway exactly once, end back at starting room
  - *What repeats? Returns to start?*
- **Scenario D**: Visit each room exactly once, return to starting room
  - *What repeats? Returns to start?*
:::

## Check Your Classifications ‚úÖ

**Raise your hand if you got:**
- **Scenario A**: Walk (repeats nodes AND edges)
- **Scenario B**: Path (no repeats, doesn't return)
- **Scenario C**: Circuit (repeats nodes, not edges, returns)
- **Scenario D**: Cycle (no repeats, returns)

## Concept 1: Walk üö∂‚Äç‚ôÇÔ∏è

:::: {.columns}

::: {.column width="60%"}

::: {.callout-tip title = "Walk = Most Permissive"}
**Definition:** Any sequence of connected nodes

**What can repeat?** Everything! Nodes AND edges
:::

**Example:** Dorm ‚Üí Cafeteria ‚Üí Library ‚Üí Dorm ‚Üí Cafeteria

- ‚úÖ Repeats node "Dorm"
- ‚úÖ Repeats edge "Dorm‚ÜîCafeteria"
- ‚úÖ This is totally fine for a walk

:::

::: {.column width="40%"}


:::

::::

## Concept 2: Trail üõ§Ô∏è

:::: {.columns}

::: {.column width="60%"}

::: {.callout-tip title = "Trail = No Edge Repeats"}
**Definition:** Walk without repeating edges

**What can repeat?** Nodes yes, edges NO
:::

**Example:** Cross each hallway exactly once, can revisit rooms

- ‚úÖ Can revisit nodes (rooms)
- ‚ùå Cannot reuse edges (hallways)
- **Key insight:** This is what K√∂nigsberg wanted!

:::

::: {.column width="40%"}

:::

::::

## Concept 3: Path üéØ

:::: {.columns}

::: {.column width="60%"}

::: {.callout-tip title = "Path = No Node Repeats"}
**Definition:** Walk without repeating nodes

**What can repeat?** Nothing! No nodes, no edges
:::

**Example:** Visit each room exactly once, no backtracking

- ‚ùå Cannot revisit nodes (rooms)
- ‚ùå Cannot reuse edges (automatic consequence)
- **Difference from trail:** More restrictive - can't even revisit nodes

:::

::: {.column width="40%"}

:::

::::

## Concept 4: Circuit ‚≠ï

:::: {.columns}

::: {.column width="60%"}

::: {.callout-tip title = "Circuit = Closed Trail"}
**Definition:** Trail that starts and ends at same node

**What can repeat?** Starting node (by definition), other nodes yes, edges NO
:::

**Example:** Use every bridge once, return home

- ‚úÖ Returns to starting point
- ‚úÖ Can revisit intermediate nodes
- ‚ùå Cannot reuse bridges
- **Difference from trail:** Must form a loop

:::

::: {.column width="40%"}


:::

::::

## Concept 5: Cycle üîÑ

:::: {.columns}

::: {.column width="60%"}

::: {.callout-tip title = "Cycle = Closed Path"}
**Definition:** Path that starts and ends at same node

**What can repeat?** Only the starting node, nothing else
:::

**Example:** Visit each location once, return home

- ‚úÖ Returns to starting point
- ‚ùå Cannot revisit any other nodes
- ‚ùå Cannot reuse any edges
- **Difference from circuit:** Most restrictive - no intermediate repeats

:::

::: {.column width="40%"}


:::

::::

## Summary: What Makes Each Different? üìä

| Type | Repeat Nodes? | Repeat Edges? | Must Close? |
|------|---------------|---------------|-------------|
| **Walk** | ‚úÖ Yes | ‚úÖ Yes | ‚ùå No |
| **Trail** | ‚úÖ Yes | ‚ùå No | ‚ùå No |
| **Path** | ‚ùå No | ‚ùå No | ‚ùå No |
| **Circuit** | ‚úÖ Yes | ‚ùå No | ‚úÖ Yes |
| **Cycle** | ‚ùå No* | ‚ùå No | ‚úÖ Yes |

*Except starting=ending node

## Reflection: Back to K√∂nigsberg üåâ

::: {.callout-tip title = "Answer:"}
**K√∂nigsberg sought an Euler circuit!**

- **Circuit:** Closed trail (returns to start)
- **Trail:** Uses every edge (bridge) exactly once
- **Not a cycle:** That would require visiting each landmass only once
:::

**Now you understand:** They wanted to cross every bridge once and return home, but they could revisit landmasses!

##


## üíª Coding Time: Networks in Code! üåê

::: {.callout-note title = "Next Steps:"}
[Let's represent networks with Python!](https://skojaku.github.io/adv-net-sci/m01-euler_tour/how-to-code-network.html) üêç

We'll learn how computers store and analyze networks
:::

## Key Takeaways üéØ

::: {.incremental}
- **Mathematical abstraction**: Focus on structure, not physical details
- **Euler's theorem**: Degree constraints determine network traversability
- **Network terminology**: Walks, trails, paths, circuits, and cycles
- **Historical impact**: From recreational puzzle to foundation of network science
- **Modern relevance**: GPS navigation, internet routing, social networks
:::

##

# Any questions?

-->